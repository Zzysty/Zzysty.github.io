<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hextra – Docs</title>
    <link>http://localhost:1313/docs/</link>
    <description>Recent content in Docs on Hextra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 Aug 2024 20:18:40 +0800</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Deeplearning</title>
      <link>http://localhost:1313/docs/deeplearning/</link>
      <pubDate>Wed, 14 Aug 2024 21:12:08 +0800</pubDate>
      
      <guid>http://localhost:1313/docs/deeplearning/</guid>
      <description>
        
        
        &lt;h1&gt;网络模型&lt;/h1&gt;&lt;h2&gt;LeNet&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;lenet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#lenet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;它是最早发布的卷积神经网络之一，因其在计算机视觉任务中的高效性能而受到广泛关注。 这个模型是由AT&amp;amp;T贝尔实验室的研究员Yann LeCun在1989年提出的（并以其命名），目的是识别图像 &lt;code&gt;LeCun.Bottou.Bengio.ea.1998&lt;/code&gt;中的手写数字。 当时，Yann LeCun发表了第一篇通过反向传播成功训练卷积神经网络的研究，这项工作代表了十多年来神经网络研究开发的成果。&lt;/p&gt;
&lt;p&gt;总体来看，(&lt;strong&gt;LeNet（LeNet-5）由两个部分组成：&lt;/strong&gt;)(卷积编码器和全连接层密集块)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积编码器：由两个卷积层组成;&lt;/li&gt;
&lt;li&gt;全连接层密集块：由三个全连接层组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;架构图&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/lenet.svg&#34; alt=&#34;../_images/lenet.svg&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 网络结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;channels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AvgPool2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;channels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AvgPool2D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pool_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sigmoid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;84&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sigmoid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;84&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积神经网络（CNN）是一类使用卷积层的网络。&lt;/li&gt;
&lt;li&gt;在卷积神经网络中，我们组合使用卷积层、非线性激活函数和汇聚层。&lt;/li&gt;
&lt;li&gt;为了构造高性能的卷积神经网络，我们通常对卷积层进行排列，逐渐降低其表示的空间分辨率，同时增加通道数。&lt;/li&gt;
&lt;li&gt;在传统的卷积神经网络中，卷积块编码得到的表征在输出之前需由一个或多个全连接层进行处理。&lt;/li&gt;
&lt;li&gt;LeNet是最早发布的卷积神经网络之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AlexNet&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;alexnet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#alexnet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;对比及改进&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更深更大的LeNet&lt;/li&gt;
&lt;li&gt;主要改进：
&lt;ul&gt;
&lt;li&gt;丢弃法（dropout）&lt;/li&gt;
&lt;li&gt;ReLU&lt;/li&gt;
&lt;li&gt;MaxPooling&lt;/li&gt;
&lt;li&gt;数据增强&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算机视觉方法论的改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2012年，AlexNet横空出世。它首次证明了学习到的特征可以超越手工设计的特征。它一举打破了计算机视觉研究的现状。 AlexNet使用了8层卷积神经网络，并以很大的优势赢得了2012年ImageNet图像识别挑战赛。&lt;/p&gt;
&lt;p&gt;AlexNet和LeNet的架构非常相似，注意，这里我们提供了一个稍微精简版本的AlexNet，去除了当年需要两个小型GPU同时运算的设计特点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;架构图&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/alexnet.svg&#34; alt=&#34;../_images/alexnet.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;AlexNet和LeNet的设计理念非常相似，但也存在显著差异。 首先，AlexNet比相对较小的LeNet5要深得多。 AlexNet由八层组成：五个卷积层、两个全连接隐藏层和一个全连接输出层。 其次，AlexNet使用ReLU而不是sigmoid作为其激活函数。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 网络结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 这里，我们使用一个11*11的更大窗口来捕捉对象。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 同时，步幅为4，以减少输出的高度和宽度。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 另外，输出通道的数目远大于LeNet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 使用三个连续的卷积层和较小的卷积窗口。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 除了最后的卷积层，输出通道的数量进一步增加。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dropout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dropout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AlexNet的架构与LeNet相似，但使用了更多的卷积层和更多的参数来拟合大规模的ImageNet数据集。&lt;/li&gt;
&lt;li&gt;今天，AlexNet已经被更有效的架构所超越，但它是从浅层网络到深层网络的关键一步。&lt;/li&gt;
&lt;li&gt;尽管AlexNet的代码只比LeNet多出几行，但学术界花了很多年才接受深度学习这一概念，并应用其出色的实验结果。这也是由于缺乏有效的计算工具。&lt;/li&gt;
&lt;li&gt;Dropout、ReLU和预处理是提升计算机视觉任务性能的其他关键步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;VGGNet&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;vggnet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#vggnet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;对比及改进&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更大更深的AlexNet（重复的VGG块）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与AlexNet、LeNet一样，VGG网络可以分为两部分：第一部分主要由卷积层和汇聚层组成，第二部分由全连接层组成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;架构图&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/vgg.svg&#34; alt=&#34;../_images/vgg.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;多个VGG块后接全连接层&lt;/li&gt;
&lt;li&gt;不同次数的重复块得到不同的架构 VGG-16，VGG-19&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# vgg块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;vgg_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_convs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_convs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;vgg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;conv_blks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 卷积层部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_convs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conv_arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;conv_blks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vgg_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_convs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_blks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 全连接层部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dropout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dropout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Linear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vgg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv_arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VGG-11使用可复用的卷积块构造网络。不同的VGG模型可通过每个块中卷积层数量和输出通道数量的差异来定义。&lt;/li&gt;
&lt;li&gt;块的使用导致网络定义的非常简洁。使用块可以有效地设计复杂的网络。&lt;/li&gt;
&lt;li&gt;在VGG论文中，Simonyan和Ziserman尝试了各种架构。特别是他们发现深层且窄的卷积（即3×3）比较浅层且宽的卷积更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;NiN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;nin&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#nin&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;网络中的网络&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;LeNet、AlexNet和VGG都有一个共同的设计模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过一系列的卷积层与汇聚层来提取空间结构特征；&lt;/li&gt;
&lt;li&gt;然后通过全连接层对特征的表征进行处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AlexNet和VGG对LeNet的改进主要在于如何扩大和加深这两个模块。 或者，可以想象在这个过程的早期使用全连接层。然而，如果使用了全连接层，可能会完全放弃表征的空间结构。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;网络中的网络&lt;/em&gt;（&lt;em&gt;NiN&lt;/em&gt;）提供了一个非常简单的解决方案：&lt;strong&gt;在每个像素的通道上分别使用多层感知机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;架构图&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/nin.svg&#34; alt=&#34;../_images/nin.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;==NiN块==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个卷积层后跟两个FC
&lt;ul&gt;
&lt;li&gt;步幅1，无填充，输出形状和卷积层输出一样&lt;/li&gt;
&lt;li&gt;充当全连接层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;架构&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无全连接层&lt;/li&gt;
&lt;li&gt;交替使用NiN块和步幅为2的MaxPooling
&lt;ul&gt;
&lt;li&gt;逐步减小高宽和增大通道数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后使用 全局平均池化得到输出
&lt;ul&gt;
&lt;li&gt;其输入通道数是类别数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;对比及改进&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NiN和AlexNet之间的一个显著区别是NiN完全取消了全连接层。&lt;/li&gt;
&lt;li&gt;相反，NiN使用一个NiN块，其输出通道数等于标签类别的数量。最后放一个&lt;em&gt;全局平均汇聚层&lt;/em&gt;（global average pooling layer），生成一个对数几率 （logits）。&lt;/li&gt;
&lt;li&gt;NiN设计的一个优点是，它显著减少了模型所需参数的数量。然而，在实践中，这种设计有时会增加训练模型的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 网络结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# NiN块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;nin_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;in_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReLU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sequential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nin_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nin_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nin_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MaxPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dropout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 标签类别数是10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nin_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AdaptiveAvgPool2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 将四维的输出转成二维的输出，其形状为(批量大小,10)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Flatten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;总结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NiN使用由一个卷积层和多个1×1卷积层组成的块。该块可以在卷积神经网络中使用，以允许更多的每像素非线性。&lt;/li&gt;
&lt;li&gt;NiN去除了容易造成过拟合的全连接层，将它们替换为全局平均汇聚层（即在所有位置上进行求和）。该汇聚层通道数量为所需的输出数量（例如，Fashion-MNIST的输出为10）。&lt;/li&gt;
&lt;li&gt;移除全连接层可减少过拟合，同时显著减少NiN的参数。&lt;/li&gt;
&lt;li&gt;NiN的设计影响了许多后续卷积神经网络的设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GoogLeNet&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;googlenet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#googlenet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;对比及改进&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这篇论文的一个重点是&lt;strong&gt;解决了什么样大小的卷积核最合适的问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Inception块&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在GoogLeNet中，基本的卷积块被称为&lt;em&gt;Inception块&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;下图中，蓝色1×1卷积 为抽取信息；白色1×1卷积为 改变通道数，减少通道数，降维，降低模型复杂性&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/inception.svg&#34; alt=&#34;../_images/inception.svg&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;架构&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GoogLeNet一共使用9个Inception块和全局平均汇聚层的堆叠来生成其估计值。&lt;/li&gt;
&lt;li&gt;Inception块之间的最大汇聚层可降低维度。 第一个模块类似于AlexNet和LeNet，Inception块的组合从VGG继承，全局平均汇聚层避免了在最后使用全连接层。&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/inception-full.svg&#34; alt=&#34;../_images/inception-full.svg&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inception块相当于一个有4条路径的子网络。它通过不同窗口形状的卷积层和最大汇聚层来并行抽取信息
&lt;ul&gt;
&lt;li&gt;并使用1×1卷积层&lt;strong&gt;减少&lt;/strong&gt;每像素级别上的&lt;strong&gt;通道维数&lt;/strong&gt;从而&lt;strong&gt;降低模型复杂度&lt;/strong&gt;，&lt;strong&gt;模型参数小&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GoogLeNet将多个设计精细的Inception块与其他层（卷积层、全连接层）串联起来。其中Inception块的通道数分配之比是在ImageNet数据集上通过大量的实验得来的。&lt;/li&gt;
&lt;li&gt;GoogLeNet和它的后继者们一度是ImageNet上最有效的模型之一：它以较低的计算复杂度提供了类似的测试精度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ResNet&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;resnet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#resnet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;残差网络的核心思想是：&lt;strong&gt;每个附加层都应该更容易地包含原始函数作为其元素之一&lt;/strong&gt;。 于是，&lt;em&gt;残差块&lt;/em&gt;（residual blocks）便诞生了，这个设计对如何建立深层神经网络产生了深远的影响。 凭借它，ResNet赢得了2015年ImageNet大规模视觉识别挑战赛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;残差块&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;串联一个层改变函数类，我们希望扩大函数类&lt;/li&gt;
&lt;li&gt;残差块加入快速通道（右边）来得到 f(x) = x + g(x)的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右图是ResNet的基础架构–&lt;em&gt;残差块&lt;/em&gt;（residual block）。 在残差块中，输入可通过跨层数据线路更快地向前传播。&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/residual-block.svg&#34; alt=&#34;../_images/residual-block.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Residual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#@save&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;use_1x1conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                               &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                               &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 1 × 1卷积，改变通道数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use_1x1conv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Conv2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                   &lt;span class=&#34;n&#34;&gt;kernel_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stride&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BatchNorm2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BatchNorm2d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bn2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conv3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;块细节&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ResNet沿用了VGG完整的3×3卷积层设计。&lt;/li&gt;
&lt;li&gt;每个卷积层后接一个批量规范化层和ReLU激活函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图，此代码生成两种类型的网络： 一种是当&lt;code&gt;use_1x1conv=False&lt;/code&gt;时，应用ReLU非线性函数之前，将输入添加到输出。 另一种是当&lt;code&gt;use_1x1conv=True&lt;/code&gt;时，添加通过1×1卷积调整通道和分辨率。&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/resnet-block.svg&#34; alt=&#34;../_images/resnet-block.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;resnet_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_residuals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;first_block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;blk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_residuals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;blk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Residual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                &lt;span class=&#34;n&#34;&gt;use_1x1conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strides&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;blk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Residual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_channels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blk&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;架构&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似VGG和GoogLeNet的总体架构&lt;/li&gt;
&lt;li&gt;Inception块替换成了ResNet块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图为ResNet-18 架构&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/resnet18.svg&#34; alt=&#34;../_images/resnet18.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;残差映射可以更容易地学习同一函数，例如将权重层中的参数近似为零。&lt;/li&gt;
&lt;li&gt;利用残差块（residual blocks）可以训练出一个有效的深层神经网络
&lt;ul&gt;
&lt;li&gt;甚至可以训练一千层的网络&lt;/li&gt;
&lt;li&gt;输入可以通过层间的残余连接更快地向前传播。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;计算机视觉（CV）&lt;/h1&gt;&lt;h2&gt;数据增强&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;数据增强&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e5%a2%9e%e5%bc%ba&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;大多数图像增广方法都具有一定的随机性。为了便于观察图像增广的效果，我们下面定义辅助函数&lt;code&gt;apply&lt;/code&gt;。 此函数在输入图像&lt;code&gt;img&lt;/code&gt;上多次运行图像增广方法&lt;code&gt;aug&lt;/code&gt;并显示所有结果。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_rows&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_cols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;num_rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_cols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;d2l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show_images&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num_cols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 水平方向随机反转&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomHorizontalFlip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 垂直翻转&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomVerticalFlip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 随机取部分并调整至规定大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;shape_aug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomResizedCrop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ratio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape_aug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 亮度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ColorJitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;brightness&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contrast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;saturation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 色相&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ColorJitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;brightness&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contrast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;saturation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 多个参数一起调&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;color_aug&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ColorJitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;brightness&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contrast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;saturation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color_aug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 所有策略一起使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;augs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Compose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transforms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RandomVerticalFlip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;color_aug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shape_aug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;augs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像增广基于现有的训练数据生成随机图像，来提高模型的泛化能力。&lt;/li&gt;
&lt;li&gt;为了在预测过程中得到确切的结果，我们通常对训练样本只进行图像增广，而在预测过程中不使用带随机操作的图像增广。&lt;/li&gt;
&lt;li&gt;深度学习框架提供了许多不同的图像增广方法，这些方法可以被同时应用。&lt;/li&gt;
&lt;li&gt;相比不增广，增广的train acc小，test acc大，某种程度上减轻了过拟合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;微调&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;微调&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%be%ae%e8%b0%83&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;迁移学习中的常见技巧:&lt;em&gt;微调&lt;/em&gt;（fine-tuning），从&lt;em&gt;源数据集&lt;/em&gt;学到的知识迁移到&lt;em&gt;目标数据集&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微调包括以下四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在源数据集（例如ImageNet数据集）上&lt;strong&gt;预训练&lt;/strong&gt;神经网络模型，即&lt;em&gt;源模型&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;创建一个新的神经网络模型，即&lt;em&gt;目标模型&lt;/em&gt;。这将复制源模型上的所有模型设计及其参数（输出层除外）。我们假定这些模型参数包含从源数据集中学到的知识，这些知识也将适用于目标数据集。我们还假设源模型的输出层与源数据集的标签密切相关；因此不在目标模型中使用该层。&lt;/li&gt;
&lt;li&gt;向目标模型添加输出层，其输出数是目标数据集中的类别数。然后随机初始化该层的模型参数。&lt;/li&gt;
&lt;li&gt;在目标数据集（如椅子数据集）上训练目标模型。输出层将从头开始进行训练，而所有其他层的参数将根据源模型的参数进行微调。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/finetune.svg&#34; alt=&#34;../_images/finetune.svg&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;当目标数据集比源数据集小得多时，微调有助于提高模型的泛化能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;训练&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个目标数据集上的正常训练任务，但使用更强的正则化
&lt;ul&gt;
&lt;li&gt;使用更小的学习率&lt;/li&gt;
&lt;li&gt;更少的数据迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;源数据集远复杂于目标数据，通常微调效果更好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微调通过使用在大数据集上得到的预训练好的模型来初始化模型权重来完成提升精度&lt;/li&gt;
&lt;li&gt;预训练模型质量很重要&lt;/li&gt;
&lt;li&gt;微调通常速度更快，精度更高&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;目标检测&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;目标检测&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%9b%ae%e6%a0%87%e6%a3%80%e6%b5%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;边界框&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标检测不仅可以识别图像中所有感兴趣的物体，还能识别它们的位置，该位置通常由矩形边界框表示。&lt;/li&gt;
&lt;li&gt;我们可以在两种常用的边界框表示（中间，宽度，高度）和（左上，右下）坐标之间进行转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;锚框&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;锚框&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%94%9a%e6%a1%86&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一块区域，计算机的预测，而边缘框是真实标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两次预测
&lt;ul&gt;
&lt;li&gt;先预测锚框内是否含有物体&lt;/li&gt;
&lt;li&gt;如果有，再预测锚框到真实边缘框的偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;IoU-交互比&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/iou.svg&#34; alt=&#34;../_images/iou.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;用来计算两个框之间的相似度
&lt;ul&gt;
&lt;li&gt;0表示无重叠，1表示重合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;赋予锚框标号&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个锚框都是一个训练样本&lt;/li&gt;
&lt;li&gt;锚框要么标注成背景，要么关联一个真实边缘框&lt;/li&gt;
&lt;li&gt;大量的锚框导致大量的负类样本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;非极大值抑制（NAS）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于一个预测边界框B，目标检测模型会计算每个类别的预测概率。 假设最大的预测概率为p，则该概率所对应的类别B即为预测的类别。具体来说，我们将p称为预测边界框B的&lt;em&gt;置信度&lt;/em&gt;（confidence）。在同一张图像中，所有预测的非背景边界框都按置信度降序排序，以生成列表L。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个锚框预测一个边缘框&lt;/li&gt;
&lt;li&gt;NMS可以合并相似的预测
&lt;ul&gt;
&lt;li&gt;选中是非背景类的最大预测值&lt;/li&gt;
&lt;li&gt;去掉所以其他和它IoU值大于θ的值&lt;/li&gt;
&lt;li&gt;重复上述过程直到所有预测要么被选中,要么被去掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;总结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们以图像的每个像素为中心生成不同形状的锚框，一类目标检测算法基于锚框来预测。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交并比&lt;/strong&gt;（IoU）也被称为杰卡德系数，用于衡量两个边界框的相似性。它是相交面积与相并面积的比率。&lt;/li&gt;
&lt;li&gt;在训练集中，我们需要给每个锚框两种类型的标签。一个是与锚框中目标检测的&lt;strong&gt;类别&lt;/strong&gt;，另一个是锚框真实相对于边界框的&lt;strong&gt;偏移量&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在预测期间，我们可以使用非极大值抑制（NMS）来移除类似的预测边界框，从而简化输出，去掉冗余。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;物体检测算法&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;物体检测算法&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%89%a9%e4%bd%93%e6%a3%80%e6%b5%8b%e7%ae%97%e6%b3%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;R-CNN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;r-cnn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#r-cnn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;R-CNN&lt;/em&gt;首先从输入图像中选取若干（例如2000个）&lt;em&gt;提议区域&lt;/em&gt;（如锚框也是一种选取方法），并标注它们的类别和边界框（如偏移量）。 [&lt;a href=&#34;https://zh-v2.d2l.ai/chapter_references/zreferences.html#id43&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Girshick et al., 2014&lt;/a&gt;]然后，用卷积神经网络对每个提议区域进行前向传播以抽取其特征。 接下来，我们用每个提议区域的特征来预测类别和边界框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/r-cnn.svg&#34; alt=&#34;../_images/r-cnn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;四步骤&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用启发式搜索算法来选择锚框&lt;/li&gt;
&lt;li&gt;使用预训练模型来对每个锚框提取特征&lt;/li&gt;
&lt;li&gt;训练一个SVM来对类别分类
&lt;ul&gt;
&lt;li&gt;训练一个线性回归模型来预测边缘框偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Fast R-CNN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;fast-r-cnn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#fast-r-cnn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;R-CNN的主要性能瓶颈在于，对每个提议区域，卷积神经网络的前向传播是独立的，而没有共享计算。 由于这些区域通常有重叠，独立的特征抽取会导致重复的计算。 &lt;em&gt;Fast R-CNN&lt;/em&gt; [&lt;a href=&#34;https://zh-v2.d2l.ai/chapter_references/zreferences.html#id42&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Girshick, 2015&lt;/a&gt;]对R-CNN的&lt;strong&gt;主要改进&lt;/strong&gt;之一，是&lt;strong&gt;仅在整张图象上执行卷积神经网络的前向传播&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/fast-rcnn.svg&#34; alt=&#34;../_images/fast-rcnn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;兴趣区域（Rol）池化层&lt;/code&gt;（对每个锚框生成固定长度的特征）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给定一个锚框，均匀分成n×m块，输出每块里的最大值&lt;/li&gt;
&lt;li&gt;无论锚框多大，总是输出nm个值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/roi.svg&#34; alt=&#34;../_images/roi.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Faster R-CNN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;faster-r-cnn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#faster-r-cnn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用一个区域提议网络来替代启发式搜索来获得更好的锚框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/faster-rcnn.svg&#34; alt=&#34;../_images/faster-rcnn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;与Fast R-CNN相比，Faster R-CNN只将生成提议区域的方法从选择性搜索改为了区域提议网络，模型的其余部分保持不变。&lt;/p&gt;
&lt;h3&gt;Mask R-CNN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;mask-r-cnn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mask-r-cnn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果有像素级别的标号，使用FCN来利用这些信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/mask-rcnn.svg&#34; alt=&#34;../_images/mask-rcnn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Mask R-CNN是基于Faster R-CNN修改而来的。 具体来说，Mask R-CNN将兴趣区域汇聚层替换为了 &lt;strong&gt;&lt;em&gt;兴趣区域对齐&lt;/em&gt;层&lt;/strong&gt;，使用&lt;em&gt;&lt;strong&gt;双线性插值&lt;/strong&gt;&lt;/em&gt;（bilinear interpolation）来保留特征图上的空间信息，从而更适于像素级预测。 兴趣区域对齐层的输出包含了所有与兴趣区域的形状相同的特征图。 它们不仅被用于预测每个兴趣区域的类别和边界框，还通过额外的全卷积网络预测目标的像素级位置。&lt;/p&gt;
&lt;h3&gt;R-CNN总结&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;r-cnn总结&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#r-cnn%e6%80%bb%e7%bb%93&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最早且有名的一类基于锚框和CNN的目标检测算法&lt;/li&gt;
&lt;li&gt;Faster R-CNN和Mask R-CNN是在求高精度场景下的常用算法
&lt;ul&gt;
&lt;li&gt;R-CNN对图像选取若干提议区域，使用卷积神经网络对每个提议区域执行前向传播以&lt;strong&gt;抽取其特征&lt;/strong&gt;，然后再用这些特征来预测提议区域的类别和边界框。&lt;/li&gt;
&lt;li&gt;Fast R-CNN对R-CNN的一个主要改进：只对&lt;strong&gt;整个图像&lt;/strong&gt;做卷积神经网络的前向传播。它还引入了&lt;strong&gt;兴趣区域汇聚层&lt;/strong&gt;，从而为具有不同形状的兴趣区域抽取相同形状的特征。&lt;/li&gt;
&lt;li&gt;Faster R-CNN将Fast R-CNN中使用的选择性搜索替换为参与训练的&lt;strong&gt;区域提议网络&lt;/strong&gt;，这样后者可以在减少提议区域数量的情况下仍保证目标检测的精度。&lt;/li&gt;
&lt;li&gt;Mask R-CNN在Faster R-CNN的基础上引入了一个&lt;strong&gt;全卷积网络&lt;/strong&gt;，从而借助目标的&lt;strong&gt;像素级&lt;/strong&gt;位置进一步提升目标检测的精度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SSD&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;ssd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#ssd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;单发多框检测&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个基础网络提取特征，多个卷积层块来减半高宽&lt;/li&gt;
&lt;li&gt;每段都生成锚框
&lt;ul&gt;
&lt;li&gt;底部段拟合小物体，顶部段拟合大物体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对每个锚框预测类别和边缘框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/ssd.svg&#34; alt=&#34;../_images/ssd.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单发多框检测是一种多尺度目标检测模型。基于基础网络块和各个多尺度特征块&lt;/li&gt;
&lt;li&gt;以&lt;strong&gt;每个像素为中心的产生多个锚框&lt;/strong&gt;，单发多框检测生成不同数量和不同大小的锚框，并通过预测这些锚框的类别和偏移量检测不同大小的目标。&lt;/li&gt;
&lt;li&gt;在训练单发多框检测模型时，&lt;strong&gt;损失函数&lt;/strong&gt;是根据锚框的类别和偏移量的预测及标注值计算得出的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;YOLO&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;yolo&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#yolo&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为SSD锚框大量重叠，浪费计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YOLO将图片均匀分成S × S个锚框，每个锚框预测B个边缘框&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;语义分割&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;语义分割&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%ad%e4%b9%89%e5%88%86%e5%89%b2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;它重点关注于如何将图像分割成属于不同语义类别的区域。 与目标检测不同，语义分割可以识别并理解图像中每一个像素的内容：其语义区域的标注和预测是像素级的。与目标检测相比，语义分割标注的像素级的边框显然更加精细。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/segmentation.svg&#34; alt=&#34;../_images/segmentation.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pascal VOC2012 语义分割数据集&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语义分割通过将图像划分为属于不同语义类别的区域，来识别并理解图像中像素级别的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语义分割的一个重要的数据集叫做Pascal VOC2012。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于语义分割的输入图像和标签在像素上一一对应，输入图像会被随机裁剪为固定尺寸而不是缩放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多应用于自动驾驶与医疗图像&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;转置卷积&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;转置卷积&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%bd%ac%e7%bd%ae%e5%8d%b7%e7%a7%af&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;卷积无法增大输入的高宽，通常要么不变，要么减半&lt;/li&gt;
&lt;li&gt;转置卷积则用来增大输入的高宽&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;2×2的输入张量计算卷积核为2×2的转置卷积&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/trans_conv.svg&#34; alt=&#34;../_images/trans_conv.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;填充，步幅，多通道&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在转置卷积中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;填充被应用于的输出（常规卷积将填充应用于输入）。 例如，当将高和宽两侧的填充数指定为1时，转置卷积的输出中将删除第一和最后的行与列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;步幅被指定为中间结果（输出），而不是输入。&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/trans_conv_stride2.svg&#34; alt=&#34;../_images/trans_conv_stride2.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;卷积核为2×2，步幅为2的转置卷积。阴影部分是中间张量的一部分，也是用于计算的输入和卷积核张量元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质还是卷积，卷积使其变小，转置卷积相反，使其变大&lt;/li&gt;
&lt;li&gt;转置卷积还原的是通道大小，即矩阵大小size，不是值的还原
&lt;ul&gt;
&lt;li&gt;例如，4×4输入卷积3×3卷积核得到2×2输出&lt;/li&gt;
&lt;li&gt;反过来，输出变输入2×2，通过3×3，得到4×4&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/1e7f5e8d17494f0b9104898ab345acdb.gif&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与卷积是做下采样（缩小图像）不同，它通常用作上采样（放大图像）&lt;/li&gt;
&lt;li&gt;与反卷积不同，反卷积是逆运算&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;全连接卷积神经网络（FCN）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;全连接卷积神经网络fcn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%85%a8%e8%bf%9e%e6%8e%a5%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9cfcn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;全卷积网络&lt;/em&gt;（fully convolutional network，FCN）采用卷积神经网络实现了从图像像素到像素类别的变换，全卷积网络将中间层特征图的高和宽变换回输入图像的尺寸：这是通过引入的&lt;em&gt;转置卷积&lt;/em&gt;（transposed convolution）实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/fcn.svg&#34; alt=&#34;../_images/fcn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FCN是深度神经网络做语义分割的奠基性工作&lt;/li&gt;
&lt;li&gt;它用转置卷积层替换CNN最后的全连接层，从而实现每个像素的预测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全卷积网络先使用&lt;strong&gt;卷积神经网络抽取图像特征&lt;/strong&gt;，然后通过&lt;strong&gt;1×1卷积层&lt;/strong&gt;将通道数变换为&lt;strong&gt;类别个数&lt;/strong&gt;，最后通过&lt;strong&gt;转置卷积层&lt;/strong&gt;将特征图的高和宽变换为输入图像的尺寸。&lt;/li&gt;
&lt;li&gt;在全卷积网络中，我们可以将转置卷积层&lt;strong&gt;初始化&lt;/strong&gt;为&lt;strong&gt;双线性插值的上采样&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;样式迁移&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;样式迁移&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%a0%b7%e5%bc%8f%e8%bf%81%e7%a7%bb&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将样式图片中的样式迁移到内容图片上，得到合成图片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用卷积神经网络，自动将一个图像中的风格应用在另一图像之上，即&lt;em&gt;风格迁移&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/style-transfer.svg&#34; alt=&#34;../_images/style-transfer.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;方法&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，我们初始化合成图像，例如将其初始化为内容图像。 该合成图像是风格迁移过程中唯一需要更新的变量，即风格迁移所需迭代的模型参数。&lt;/li&gt;
&lt;li&gt;然后，我们选择一个&lt;strong&gt;预训练的卷积&lt;/strong&gt;神经网络来&lt;strong&gt;抽取图像的特征&lt;/strong&gt;，其中的模型参数在训练中无须更新。&lt;/li&gt;
&lt;li&gt;这个深度卷积神经网络凭借多个层逐级抽取图像的特征，我们可以选择其中某些层的输出作为内容特征或风格特征。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/neural-style.svg&#34; alt=&#34;../_images/neural-style.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实线箭头和虚线箭头分别表示前向传播和反向传播&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;前向传播（实线箭头方向）计算风格迁移的损失函数&lt;/li&gt;
&lt;li&gt;反向传播（虚线箭头方向）迭代模型参数，即不断更新合成图像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;风格迁移损失函数由三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;内容损失&lt;/em&gt;使合成图像与内容图像在内容特征上接近；&lt;/li&gt;
&lt;li&gt;&lt;em&gt;风格损失&lt;/em&gt;使合成图像与风格图像在风格特征上接近；&lt;/li&gt;
&lt;li&gt;&lt;em&gt;全变分损失&lt;/em&gt;则有助于减少合成图像中的噪点&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;循环神经网络&lt;/h1&gt;&lt;h2&gt;序列模型&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;序列模型&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ba%8f%e5%88%97%e6%a8%a1%e5%9e%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;处理序列数据需要&lt;strong&gt;统计工具&lt;/strong&gt;和新的深度神经网络架构&lt;/p&gt;
&lt;p&gt;&lt;code&gt;自回归模型&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/sequence-model.svg&#34; alt=&#34;../_images/sequence-model.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内插法&lt;/strong&gt;（在现有观测值之间进行估计）和&lt;strong&gt;外推法&lt;/strong&gt;（对超出已知观测范围进行预测）在实践的难度上差别很大。因此，对于你所拥有的序列数据，在训练时始终要尊重其时间顺序，即最好&lt;strong&gt;不要基于未来的数据&lt;/strong&gt;进行训练。&lt;/li&gt;
&lt;li&gt;序列模型的估计需要专门的统计工具，两种较流行的选择是&lt;strong&gt;自回归模型&lt;/strong&gt;和&lt;strong&gt;隐变量自回归模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对于时间是向前推进的因果模型，正向估计通常比反向估计更容易。&lt;/li&gt;
&lt;li&gt;对于直到时间步t的观测序列，其在时间步t+k的预测输出是“k步预测”。随着我们对预测时间k值的增加，会造成误差的快速累积和预测质量的极速下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文本预处理&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;文本预处理&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%96%87%e6%9c%ac%e9%a2%84%e5%a4%84%e7%90%86&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文本是序列数据的一种最常见的形式之一。&lt;/li&gt;
&lt;li&gt;为了对文本进行预处理，我们通常将&lt;strong&gt;文本拆分为词元&lt;/strong&gt;，构建词表将&lt;strong&gt;词元&lt;/strong&gt;字符串映射为&lt;strong&gt;数字索引&lt;/strong&gt;，并将&lt;strong&gt;文本数据&lt;/strong&gt;转换为&lt;strong&gt;词元索引&lt;/strong&gt;以供模型操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;语言模型&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;语言模型&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%ad%e8%a8%80%e6%a8%a1%e5%9e%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;给定文本序列，语言模型的目标是估计联合概率&lt;/li&gt;
&lt;li&gt;应用
&lt;ul&gt;
&lt;li&gt;预训练模型（BERT，GPT-3）&lt;/li&gt;
&lt;li&gt;生成文本，给定一些词，不断预测，持续生成后面的词汇&lt;/li&gt;
&lt;li&gt;判断多个序列中哪个更常见，语音识别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言模型是自然语言处理的关键。&lt;/li&gt;
&lt;li&gt;n元语法通过截断相关性，为处理长序列提供了一种实用的模型。&lt;/li&gt;
&lt;li&gt;长序列存在一个问题：它们很少出现或者从不出现。&lt;/li&gt;
&lt;li&gt;齐普夫定律支配着单词的分布，这个分布不仅适用于一元语法，还适用于其他n元语法。&lt;/li&gt;
&lt;li&gt;通过拉普拉斯平滑法可以有效地处理结构丰富而频率不足的低频词词组。&lt;/li&gt;
&lt;li&gt;读取长序列的主要方式是随机采样和顺序分区。在迭代过程中，后者可以保证来自两个相邻的小批量中的子序列在原始序列上也是相邻的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;RNN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;rnn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#rnn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;循环神经网络&lt;/em&gt;（recurrent neural networks，RNNs） 是具有隐状态的神经网络。 在介绍循环神经网络模型之前， 我们首先回顾 &lt;a href=&#34;https://zh-v2.d2l.ai/chapter_multilayer-perceptrons/mlp.html#sec-mlp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4.1节&lt;/a&gt;中介绍的多层感知机模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;困惑度&lt;/code&gt;（衡量语言模型好坏的标准）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用平均交叉熵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;困惑度的最好的理解是“&lt;strong&gt;下一个词元的实际选择数的调和平均数&lt;/strong&gt;”。 我们看看一些案例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在最好的情况下，模型总是完美地估计标签词元的概率为1。 在这种情况下，模型的困惑度为1。&lt;/li&gt;
&lt;li&gt;在最坏的情况下，模型总是预测标签词元的概率为0。 在这种情况下，困惑度是&lt;strong&gt;正无穷大&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在基线上，该模型的预测是词表的所有可用词元上的均匀分布。 在这种情况下，困惑度等于词表中唯一词元的数量。 事实上，如果我们在没有任何压缩的情况下存储序列， 这将是我们能做的最好的编码方式。 因此，这种方式提供了一个重要的上限， 而任何实际模型都必须超越这个上限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;梯度裁剪&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;梯度裁剪&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%a2%af%e5%ba%a6%e8%a3%81%e5%89%aa&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;梯度爆炸的一种常见且相对容易的解决方案是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在通过网络向后传播误差并使用其更新权重之前，&lt;strong&gt;更改误差的导数&lt;/strong&gt;。 两种方法包括：
&lt;ul&gt;
&lt;li&gt;给定选定的向量范数（ vector norm）来重新缩放梯度；&lt;/li&gt;
&lt;li&gt;以及裁剪超出预设范围的梯度值。 这些方法一起被称为梯度裁剪（gradient clipping）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对隐状态使用循环计算的神经网络称为循环神经网络（RNN）。&lt;/li&gt;
&lt;li&gt;循环神经网络的输出取决于输入和前一时间的隐变量&lt;/li&gt;
&lt;li&gt;应用到语言模型中时，循环神经网络根据当前词预测下一次时刻词&lt;/li&gt;
&lt;li&gt;使用困惑度来评价语言模型的质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;门控循环单元（GRU）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;门控循环单元gru&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%97%a8%e6%8e%a7%e5%be%aa%e7%8e%af%e5%8d%95%e5%85%83gru&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;重置门和更新门&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重置门允许我们控制“可能还想记住”的过去状态的数量；（能关注）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新门将允许我们控制新状态中有多少个是旧状态的副本。（能遗忘）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/gru-1.svg&#34; alt=&#34;../_images/gru-1.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用sigmoid激活函数的两个全连接层给出。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;候选隐状态&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/gru-2.svg&#34; alt=&#34;../_images/gru-2.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;总之，门控循环单元具有以下两个显著特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重置门有助于捕获序列中的短期依赖关系。&lt;/li&gt;
&lt;li&gt;更新门有助于捕获序列中的长期依赖关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;长短期记忆网络（LSTM）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;长短期记忆网络lstm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%95%bf%e7%9f%ad%e6%9c%9f%e8%ae%b0%e5%bf%86%e7%bd%91%e7%bb%9clstm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;长短期记忆网络的设计灵感来自于计算机的逻辑门;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/lstm-0.svg&#34; alt=&#34;../_images/lstm-0.svg&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;忘记门：将值朝0减少&lt;/li&gt;
&lt;li&gt;输入门：决定是否忽略掉数据&lt;/li&gt;
&lt;li&gt;输出门：决定是不是使用隐状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就如在门控循环单元中一样， 当前时间步的输入和前一个时间步的&lt;strong&gt;隐状态&lt;/strong&gt;作为数据送入长短期记忆网络的门中， 如图所示。 它们由三个具有sigmoid激活函数的全连接层处理， 以计算输入门、遗忘门和输出门的值。 因此，这三个门的值都在(0,1)的范围内。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;隐状态&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/lstm-3.svg&#34; alt=&#34;../_images/lstm-3.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长短期记忆网络有三种类型的门：输入门、遗忘门和输出门。&lt;/li&gt;
&lt;li&gt;长短期记忆网络的隐藏层输出包括“隐状态”和“记忆元”。只有隐状态会传递到输出层，而记忆元完全属于内部信息。&lt;/li&gt;
&lt;li&gt;长短期记忆网络可以缓解梯度消失和梯度爆炸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;深层循环神经网络&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;深层循环神经网络&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%b7%b1%e5%b1%82%e5%be%aa%e7%8e%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/deep-rnn.svg&#34; alt=&#34;../_images/deep-rnn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该图为深度循环神经网络结构，有多个隐藏层&lt;/p&gt;
&lt;p&gt;&lt;code&gt;总结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;深度循环神经网络使用多个隐藏层来获得更多的非线性性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在深度循环神经网络中，隐状态的信息被传递到当前层的下一时间步和下一层的当前时间步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有许多不同风格的深度循环神经网络， 如长短期记忆网络、门控循环单元、或经典循环神经网络。 这些模型在深度学习框架的高级API中都有涵盖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总体而言，深度循环神经网络需要大量的调参（如学习率和修剪） 来确保合适的收敛，模型的初始化也需要谨慎。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;双向循环神经网络&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;双向循环神经网络&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%8f%8c%e5%90%91%e5%be%aa%e7%8e%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果我们希望在循环神经网络中拥有一种机制， 使之能够提供与隐马尔可夫模型类似的前瞻能力， 我们就需要修改循环神经网络的设计。&lt;/p&gt;
&lt;p&gt;概念上， 只需要增加一个“从&lt;strong&gt;最后一个词元开始从后向前运行&lt;/strong&gt;”的循环神经网络， 而不是只有一个在前向模式下“从第一个词元开始运行”的循环神经网络。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;双向循环神经网络&lt;/em&gt;（bidirectional RNNs） 添加了&lt;strong&gt;反向传递信息的隐藏层&lt;/strong&gt;，以便更灵活地处理此类信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/birnn.svg&#34; alt=&#34;../_images/birnn.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该图为具有单个&lt;strong&gt;隐藏层&lt;/strong&gt;的&lt;strong&gt;双向&lt;/strong&gt;循环神经网络的架构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐藏层有两个
&lt;ul&gt;
&lt;li&gt;前向RNN隐层&lt;/li&gt;
&lt;li&gt;反向RNN隐层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;合并两个隐状态得到输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过反向更新的隐藏层来利用方向时间信息&lt;/li&gt;
&lt;li&gt;通常用来对序列抽取特征，填空，而不是预测未来&lt;/li&gt;
&lt;li&gt;在双向循环神经网络中，每个时间步的隐状态由当前时间步的前后数据同时决定。&lt;/li&gt;
&lt;li&gt;双向循环神经网络与概率图模型中的“前向-后向”算法具有相似性。&lt;/li&gt;
&lt;li&gt;双向循环神经网络主要用于序列编码和给定双向上下文的观测估计。&lt;/li&gt;
&lt;li&gt;由于梯度链更长，因此双向循环神经网络的训练代价非常高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;机器翻译与数据集&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;机器翻译与数据集&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%9c%ba%e5%99%a8%e7%bf%bb%e8%af%91%e4%b8%8e%e6%95%b0%e6%8d%ae%e9%9b%86&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;语言模型&lt;/strong&gt;是自然语言处理的关键， 而&lt;em&gt;&lt;strong&gt;机器翻译&lt;/strong&gt;&lt;/em&gt;是语言模型最成功的基准测试。 因为机器翻译正是将输入序列转换成输出序列的 &lt;em&gt;序列转换模型&lt;/em&gt;（sequence transduction）的核心问题。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;机器翻译&lt;/strong&gt;&lt;/em&gt;（machine translation）指的是 将序列从一种语言自动翻译成另一种语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;神经网络机器翻译方法&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强调的是端到端的学习&lt;/li&gt;
&lt;li&gt;机器翻译的数据集是由源语言和目标语言的文本序列对组成的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器翻译指的是将文本序列从一种语言自动翻译成另一种语言。&lt;/li&gt;
&lt;li&gt;使用单词级词元化时的词表大小，将明显大于使用字符级词元化时的词表大小。为了缓解这一问题，我们可以&lt;strong&gt;将低频词元视为相同的未知词元&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;通过截断和填充文本序列，可以保证所有的文本序列都具有相同的长度，以便以小批量的方式加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;编码器-解码器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;编码器&lt;/em&gt;（encoder）： 它接受一个长度可变的序列作为输入， 并将其转换为具有固定形状的编码状态。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;解码器&lt;/em&gt;（decoder）： 它将固定形状的编码状态映射到长度可变的序列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/encoder-decoder.svg&#34; alt=&#34;../_images/encoder-decoder.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该模型中，编码器负责表示输入，解码器负责输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“编码器－解码器”架构可以将长度可变的序列作为输入和输出，因此适用于机器翻译等序列转换问题。&lt;/li&gt;
&lt;li&gt;编码器将长度可变的序列作为输入，并将其转换为具有固定形状的编码状态。&lt;/li&gt;
&lt;li&gt;解码器将具有固定形状的编码状态映射为长度可变的序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编码器没有输出&lt;/li&gt;
&lt;li&gt;编码器最后时间步的隐状态用作解码器的初始隐状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;序列到序列学习（seq2seq）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;序列到序列学习seq2seq&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ba%8f%e5%88%97%e5%88%b0%e5%ba%8f%e5%88%97%e5%ad%a6%e4%b9%a0seq2seq&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在机器翻译中使用两个RNN进行seq2seq&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://zh-v2.d2l.ai/_images/seq2seq.svg&#34; alt=&#34;../_images/seq2seq.svg&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编码器是一个RNN，读取输入句子
&lt;ul&gt;
&lt;li&gt;可以双向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解码器使用另外一个RNN来输出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;衡量序列评估好坏&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;BLEU（bilingual evaluation understudy） 最先是用于评估机器翻译的结果， 但现在它已经被广泛用于测量许多应用的输出序列的质量。 原则上说，对于预测序列中的任意n元语法（n-grams）， BLEU的评估都是这个n元语法是否出现在标签序列中。&lt;/p&gt;
&lt;p&gt;BLEU定义&lt;/p&gt;
&lt;img src=&#34;C:\Users\zzy\AppData\Roaming\Typora\typora-user-images\image-20221204111207068.png&#34; alt=&#34;image-20221204111207068&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;总结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;seq2seq从一个句子生成另一个句子&lt;/li&gt;
&lt;li&gt;编码器和解码器都是RNN&lt;/li&gt;
&lt;li&gt;编码器最后时间隐状态给到解码器初始隐状态来完成信息传递&lt;/li&gt;
&lt;li&gt;使用BLEU来衡量生成序列的好坏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;束搜索&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;束搜索&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%9d%9f%e6%90%9c%e7%b4%a2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在seq2seq中使用&lt;strong&gt;贪心搜索&lt;/strong&gt;来预测序列，即输出概率最大的词，但贪心不一定最优；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;贪心：速度快，效果不好&lt;/p&gt;
&lt;p&gt;穷举：效果好但速度满，计算通常不可行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此推出 &lt;strong&gt;穷举搜索&lt;/strong&gt; 和 &lt;strong&gt;束搜索&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;穷举：对所有可能的序列，计算其概率，然后选取最好的那个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;束：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存最好的k个候选&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个时刻，对每个候选项加一项（n种可能），然后再在kn个选项里选最好的k个&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/beam-search.svg&#34; alt=&#34;../_images/beam-search.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;总结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;束搜索每次搜索时保存k个最好的候选
&lt;ul&gt;
&lt;li&gt;k=1时，为贪心搜索&lt;/li&gt;
&lt;li&gt;k=n时，为穷举搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;注意力机制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;卷积，全连接，池化层都只考虑不随意线索&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意力机制则显示的考虑随意线索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随意线索又叫 查询（query）&lt;/li&gt;
&lt;li&gt;每个输入是 一个值（value）和不随意线索（key）的对&lt;/li&gt;
&lt;li&gt;通过注意力池化层来有偏向的选择某些输入&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/qkv.svg&#34; alt=&#34;../_images/qkv.svg&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意力机制中，通过query（随意线索）和key（不随意线索）来有偏向性的选择输入&lt;/li&gt;
&lt;li&gt;Nadaraya-Watson核回归是具有注意力机制的机器学习范例。&lt;/li&gt;
&lt;li&gt;Nadaraya-Watson核回归的注意力汇聚是对训练数据中输出的加权平均。从注意力的角度来看，分配给每个值的注意力权重取决于将值所对应的键和查询作为输入的函数。&lt;/li&gt;
&lt;li&gt;注意力汇聚可以分为非参数型和带参数型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;注意力分数&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;注意力分数&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%b3%a8%e6%84%8f%e5%8a%9b%e5%88%86%e6%95%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;C:%5cUsers%5czzy%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20221222131353674.png&#34; alt=&#34;image-20221222131353674&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意力分数是query和key的相似度，注意力权重是分数的softmax结果&lt;/li&gt;
&lt;li&gt;两种常见的分数计算：
&lt;ul&gt;
&lt;li&gt;将query和key合并起来进入一个单输出单隐藏层的MLP&lt;/li&gt;
&lt;li&gt;直接将query和key做内积（两者长度一致）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;自注意力&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;自注意力&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%87%aa%e6%b3%a8%e6%84%8f%e5%8a%9b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;三者差别&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/cnn-rnn-self-attention.svg&#34; alt=&#34;../_images/cnn-rnn-self-attention.svg&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;位置编码&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同与CNN，RNN，自注意力没有记录位置信息&lt;/li&gt;
&lt;li&gt;将位置信息注入到输入里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自注意力池化层将xi当作key，val，query来对序列抽取特征&lt;/li&gt;
&lt;li&gt;完全并行，最长序列为1，但对长序列计算复杂度高&lt;/li&gt;
&lt;li&gt;位置编码在输入中加入位置信息，使自注意力能记忆位置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Transformer&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;transformer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#transformer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;架构&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于编码器-解码器架构来处理序列对&lt;/li&gt;
&lt;li&gt;与使用注意力的seq2seq不同，Transformer是纯基于注意力&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/transformer.svg&#34; alt=&#34;../_images/transformer.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;多头注意力&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;多头注意力&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%a4%9a%e5%a4%b4%e6%b3%a8%e6%84%8f%e5%8a%9b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对同一key，val，query，希望提取不同的特征
&lt;ul&gt;
&lt;li&gt;短距离关系和长距离关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多头注意力使用h个独立的注意力池化
&lt;ul&gt;
&lt;li&gt;合并各个头的输出得到最终输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/multi-head-attention.svg&#34; alt=&#34;../_images/multi-head-attention.svg&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基于位置的前馈网络&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;基于位置的前馈网络&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%9f%ba%e4%ba%8e%e4%bd%8d%e7%bd%ae%e7%9a%84%e5%89%8d%e9%a6%88%e7%bd%91%e7%bb%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将输入形状由（b,n,d）变换成（bn,d）&lt;/li&gt;
&lt;li&gt;作用两个全连接层&lt;/li&gt;
&lt;li&gt;输出形状由（bn,d）变化回（b,n,d）&lt;/li&gt;
&lt;li&gt;等价于两层核窗口为1的一维卷积层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transformer是一个纯注意力机制的编码-解码器&lt;/li&gt;
&lt;li&gt;编码器和解码器中都有transformer块&lt;/li&gt;
&lt;li&gt;每个块里使用&lt;strong&gt;多头（自）注意力&lt;/strong&gt;，&lt;strong&gt;基于位置的前馈网络&lt;/strong&gt;，&lt;strong&gt;层归一化&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;BERT&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;bert&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bert&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;动机&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于微调的NLP模型&lt;/li&gt;
&lt;li&gt;预训练的模型抽取了足够多的信息&lt;/li&gt;
&lt;li&gt;新的任务只需要增加一个简单地输出层&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;https://github.com/MLNLP-World/DeepLearning-MuLi-Notes/raw/main/imgs/69/69-1.png&#34; alt=&#34;image&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;架构&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有编码器的Transformer&lt;/li&gt;
&lt;li&gt;两个版本：
&lt;ul&gt;
&lt;li&gt;Base:#blocks=12,hidden size=768,#heads=12,#parameters=110M&lt;/li&gt;
&lt;li&gt;Large:#blocks=24,hidden size=1024,#heads=16,#paramerter=340M&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在大规模数据上训练&amp;gt;3B词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;预训练&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;掩蔽语言模型&lt;/li&gt;
&lt;li&gt;下一句预测
&lt;ul&gt;
&lt;li&gt;前者能够编码双向上下文来表示单词，而后者则显式地建模文本对之间的逻辑关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BERT针对微调设计&lt;/li&gt;
&lt;li&gt;基于Transformer的编码器做了如下修改
&lt;ul&gt;
&lt;li&gt;模型更大，训练数据更多&lt;/li&gt;
&lt;li&gt;输入句子对，片段嵌入，可学习的位置编码&lt;/li&gt;
&lt;li&gt;训练时使用两个任务：
&lt;ul&gt;
&lt;li&gt;带掩码的语言模型&lt;/li&gt;
&lt;li&gt;下一个句子预测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;微调&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;微调-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%be%ae%e8%b0%83-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;应用&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;句子分类
&lt;ul&gt;
&lt;li&gt;将句首的&lt;CLS&gt;token对应的向量输入到全连接层分类。对于一对句子也是同理，句子中间用&lt;SEP&gt;分开但仍只用第一个&lt;CLS&gt;对应的向量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名实体识别
&lt;ul&gt;
&lt;li&gt;识别一个词元是不是命名实体，例如人名、机构、位置。&lt;/li&gt;
&lt;li&gt;其方法是将每一个非特殊词元的向量放进全连接层分类（二分类多分类均可）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题回答
&lt;ul&gt;
&lt;li&gt;给定一个问题和描述文字，找出一个判断作为回答。&lt;/li&gt;
&lt;li&gt;微调方法为对片段中的每个词元预测它是不是回答的开头或结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使下游任务各有不同，使用BERT微调时均只需要增加输出层&lt;/li&gt;
&lt;li&gt;但根据任务的不同，输入的表示，和使用的BERT特征也会不一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;优化算法&lt;/h1&gt;&lt;p&gt;&lt;code&gt;局部最小 vs 全局最小&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://github.com/MLNLP-World/DeepLearning-MuLi-Notes/raw/main/imgs/72/72-02.png&#34; alt=&#34;image&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;凸集和凸函数&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;凸集：形象化来说，就是这个集合上任意两个点连一条线，这个线在集合里面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;凸函数：形象上来说函数上任取两个点连线，函数都在该线下面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;凸优化问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果代价函数f是凸的，且限制集合C是凸的，则为凸优化问题，&lt;strong&gt;局部最小一定是全局最小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;严格凸优化问题有唯一的全局最小&lt;/li&gt;
&lt;li&gt;凸：线性回归，softmax回归&lt;/li&gt;
&lt;li&gt;非凸：其他（MLP,CNN,RNN,attention）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一组非凸，后两组凸&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/pacman.svg&#34; alt=&#34;../_images/pacman.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余弦函数为非凸的，而抛物线函数和指数函数为凸的（1，3凸，2非凸）&lt;/p&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/output_convexity_94e148_21_0.svg&#34; alt=&#34;../_images/output_convexity_94e148_21_0.svg&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;梯度下降&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;梯度下降&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%a2%af%e5%ba%a6%e4%b8%8b%e9%99%8d&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;梯度下降——最简单的迭代求解算法（SGD）&lt;/li&gt;
&lt;li&gt;随机梯度下降
&lt;ul&gt;
&lt;li&gt;求导数需要求所有样本导数，样本多的情况下代价太大&lt;/li&gt;
&lt;li&gt;理论依据：所用样本，和随机选取一个样本得到的数学期望是一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;小批量随机梯度下降（实际应用的）
&lt;ul&gt;
&lt;li&gt;计算原因：计算单样本的梯度难以完全利用硬件资源&lt;/li&gt;
&lt;li&gt;采集一个随机子集&lt;/li&gt;
&lt;li&gt;理论依据：无偏近，但降低了方差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;冲量法（动量）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;冲量法动量&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%86%b2%e9%87%8f%e6%b3%95%e5%8a%a8%e9%87%8f&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用平滑过的梯度对权重更新，不容易震荡&lt;/li&gt;
&lt;li&gt;momentum&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;https://github.com/MLNLP-World/DeepLearning-MuLi-Notes/raw/main/imgs/72/72-03.png&#34; alt=&#34;image&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Adam&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;adam&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#adam&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非常平滑，对于学习率不敏感&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于t比较小的时候，由于$v_0=0$,所以会导致一开始值比较小，做了一个修正。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;https://github.com/MLNLP-World/DeepLearning-MuLi-Notes/raw/main/imgs/72/72-04.png&#34; alt=&#34;image&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么除以$\sqrt{\widehat{s}_t}+\epsilon$？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在nlp里面常用，起到正则化的作用，控制每个维度的值在合适的大小。&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://github.com/MLNLP-World/DeepLearning-MuLi-Notes/raw/main/imgs/72/72-05.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深度学习模型大部分是非凸的&lt;/li&gt;
&lt;li&gt;小批量随机梯度下降是最常见的优化算法&lt;/li&gt;
&lt;li&gt;冲量是对梯度做平滑&lt;/li&gt;
&lt;li&gt;Adam是对梯度做平滑，且对梯度各个维度值做重新调整，对于学习率不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;01-Regression&lt;/h1&gt;&lt;h2&gt;Machine Learning&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;machine-learning&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#machine-learning&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;概况：机器学习就是让机器具备找一个函式的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;三个机器学习任务&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;三个机器学习任务&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%b8%89%e4%b8%aa%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0%e4%bb%bb%e5%8a%a1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Regression：要找的函式,他的输出是一个数值&lt;/li&gt;
&lt;li&gt;Classification:函式的输出,就是从设定好的选项裡面,选择一个当作输出&lt;/li&gt;
&lt;li&gt;Structured Learning:机器产生有结构的东西的问题——学会创造&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;找函式的过程：三个步骤&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;找函式的过程三个步骤&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%89%be%e5%87%bd%e5%bc%8f%e7%9a%84%e8%bf%87%e7%a8%8b%e4%b8%89%e4%b8%aa%e6%ad%a5%e9%aa%a4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;带有未知参数的函式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带有Unknown的Parameter的Function =&amp;gt; model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义一个东西叫做Loss(损失函数)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss它也是一个Function,那这个Function它的输入,是 我们Model裡面的参数
&lt;ul&gt;
&lt;li&gt;L越大,代表一组参数越不好,这个大L越小,代表现在这一组参数越好&lt;/li&gt;
&lt;li&gt;计算方法：求取估测的值跟实际的值（Label） 之间的差距
&lt;ul&gt;
&lt;li&gt;MAE(mean absolute error)——平均绝对误差&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/3ef87b78a9af65e308cf4aa9acf6f203efbdeded&#34; alt=&#34;{\displaystyle \mathrm {MAE} ={\frac {\sum {i=1}^{n}\left|y{i}-x_{i}\right|}{n}}={\frac {\sum {i=1}^{n}\left|e{i}\right|}{n}}.}&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;li&gt;MSE(mean square error)——均方误差&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://bkimg.cdn.bcebos.com/formula/845ae0515359869c505b869451eb4777.svg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Cross-entropy:计算&lt;strong&gt;概率分布&lt;/strong&gt;之间的差距——交叉熵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimization(优化)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;找到能让损失函数值最小的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体方法：Gradient Descent（梯度下降）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;随机选取初始值 $w_0$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算在 $w=w_0$的时候,&lt;em&gt;w&lt;/em&gt;这个参数对&lt;em&gt;loss&lt;/em&gt;的微分是多少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据微分（梯度）的方向，改变参数的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;改变的大小取决于：&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;斜率的大小&lt;/li&gt;
&lt;li&gt;学习率的大小**（超参数）**&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么时候停下来？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自己设置上限**（超参数）**&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理想情况：微分值为0（极小值点），不会再更新⇒有可能陷入局部最小值，不能找到全局最小值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事实上：局部最小值不是真正的问题！！！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Liner Model（线性模型）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;liner-model线性模型&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#liner-model%e7%ba%bf%e6%80%a7%e6%a8%a1%e5%9e%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;==Sigmoid函数==&lt;/p&gt;
&lt;p&gt;公式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/a26a3fa3cbb41a3abfe4c7ff88d47f0181489d13&#34; alt=&#34;{\displaystyle S(t)={\frac {1}{1&amp;#43;e^{-t}}}.}&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F18d619c4-5e89-4888-9f05-45e5e181d27f%2FUntitled.png?table=block&amp;id=9300df07-51a3-4c32-805f-bd88c8e6c9e1&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;Update：每次更新一次参数叫做一次 Update,&lt;/li&gt;
&lt;li&gt;Epoch：把所有的 Batch 都看过一遍,叫做一个 Epoch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模型变型⇒ReLU（Rectified Linear Unit，线性整流单元）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把两个 ReLU 叠起来,就可以变成 Hard 的 Sigmoid&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==Softmax==&lt;/p&gt;
&lt;p&gt;公式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/e348290cf48ddbb6e9a6ef4e39363568b67c09d3&#34; alt=&#34;{\displaystyle \sigma (\mathbf {z} ){j}={\frac {e^{z{j}}}{\sum {k=1}^{K}e^{z{k}}}}}&#34; loading=&#34;lazy&#34; /&gt;  for &lt;em&gt;j&lt;/em&gt; = 1, …, &lt;em&gt;K&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;**归一化指数函数。**它是二分类函数&lt;a href=&#34;https://so.csdn.net/so/search?q=sigmoid&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sigmoid&lt;/a&gt;在多分类上的推广，目的是将多分类的结果以概率的形式展现出来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多类分类模型&lt;/p&gt;
&lt;p&gt;​		使用Softmax 操作子得到每个类的预测置信度&lt;/p&gt;
&lt;p&gt;​		使用交叉熵来衡量预测和标号的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;02.1-DeepLearning-General Guidance&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F6586a506-6ac8-43ad-a1d9-28e6de0b1fdb%2FUntitled.png?table=block&amp;amp;id=53a2d275-3157-4673-93d0-c137a8465213&amp;amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;如何使模型达到更好的效果？&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;如何使模型达到更好的效果&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e4%bd%bf%e6%a8%a1%e5%9e%8b%e8%be%be%e5%88%b0%e6%9b%b4%e5%a5%bd%e7%9a%84%e6%95%88%e6%9e%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分析在训练数据上的Loss&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model Bias&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所有的function集合起来,得到一个function的set.但是这个function的set太小了,没有包含任何一个function,可以让我们的loss变低⇒&lt;strong&gt;可以让loss变低的function,不在model可以描述的范围内。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⇒解决方法：重新设计一个Model，**一个更复杂的、更有弹性的、有未知参数的、需要更多features的function&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;区分两种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看到一个你从来没有做过的问题,也许你可以先跑一些比较小的,比较浅的network,或甚至用一些,不是deep learning的方法⇒比较容易做Optimize的,它们比较不会有optimization失败的问题&lt;/li&gt;
&lt;li&gt;如果你发现你深的model,跟浅的model比起来,深的model明明弹性比较大,但loss却没有办法比浅的model压得更低,那就代表说你的optimization有问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析测试数据上的Loss&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overfitting：training的loss小,testing的loss大,这个有可能是overfitting&lt;/p&gt;
&lt;p&gt;如果你的model它的&lt;strong&gt;自由度很大&lt;/strong&gt;的话,它可以&lt;strong&gt;产生非常奇怪的曲线&lt;/strong&gt;,导致训练集上的结果好,但是测试集上的loss很大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加训练集&lt;/li&gt;
&lt;li&gt;限制模型，使其弹性不那么大
&lt;ul&gt;
&lt;li&gt;给它&lt;strong&gt;比较少的参数（比如神经元的数目）；模型&lt;/strong&gt;共用参数**&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;比较少的features&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Early Stopping&lt;/li&gt;
&lt;li&gt;Regularization&lt;/li&gt;
&lt;li&gt;Dropout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;==选出有较低testing-loss的模型==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cross Validation（交叉验证）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5782b3e5-2e99-488f-ba63-aaec6b59631d%2FUntitled.png?table=block&amp;id=89a42d1a-8be3-41f5-923a-95f55307fb0d&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;ol&gt;
&lt;li&gt;把Training的资料分成两半,一部分叫作Training Set,一部分是Validation Set&lt;/li&gt;
&lt;li&gt;在Validation Set上面,去衡量它们的分数,你根据Validation Set上面的分数,去挑选结果，不要管在public testing set上的结果，避免overfiting（过拟合）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;训练数据集：训练模型参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证数据集：选择模型超参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非大数据集上通常使用k-折交叉验证&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;k折交叉验证（ k-Folder Cross Validation），经常会用到的。 k折交叉验证先将数据集 D随机划分为 k个大小相同的互斥子集，即 ，每次随机的选择 k-1份作为训练集，剩下的1份做测试集。当这一轮完成后，重新随机选择 k份来训练数据。若干轮（小于 k ）之后，选择损失函数评估最优的模型和参数。注意，&lt;strong&gt;交叉验证法评估结果的稳定性和保真性在很大程度上取决于 k取值&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;==分验证集==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;N-fold Cross Validation （N倍交叉验证）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N-fold Cross Validation&lt;/strong&gt;就是你先把你的训练集切成N等份,在这个例子里面我们切成N等份,切完以后,你拿其中一份当作Validation Set,另外N-1份当Training Set,重复N次&lt;/p&gt;
&lt;p&gt;把这多个模型,在这三个setting下,通通跑过一次,把三种状况的结果都平均起来,看看谁的结果最好；最后再把选出来的model（这里是model 1）,用在全部的Training Set上,训练出来的模型,再用在Testing Set上面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;权重衰退&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;权重衰退&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%9d%83%e9%87%8d%e8%a1%b0%e9%80%80&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;模型在训练的过程中可能&lt;strong&gt;过拟合&lt;/strong&gt;，这一般是由于数据复杂度太低而模型容量太大导致的，简而言之就是数据太简单，模型太复杂，模型学习到了数据的一切，包括噪音。此时，权重往往会很大（受噪音影响），显然模型并没有训练到最优（虽然它记住了训练数据的一切，但是对于新的样本泛化能力很差）。所以，&lt;strong&gt;我们想要适当降低权重，使模型接近最优，这样模型的泛化性能提升就适当的解决了过拟合问题，这就是权重衰退。&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;https://img-blog.csdnimg.cn/8e27156290e74d158ebd777a585b9c6b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5qmZ5a2Q5ZCWMjE=,size_17,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;权重衰退通过L2正则项使得模型参数不会过大，从而控制模型复杂度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正则项权重是控制模型复杂度的超参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;丢弃法&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;丢弃法&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%b8%a2%e5%bc%83%e6%b3%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;2012年，Alex、Hinton在其论文《ImageNet Classification with Deep Convolutional Neural Networks》中用到了Dropout算法，用于防止过拟合。&lt;/p&gt;
&lt;p&gt;Dropout可以作为训练深度神经网络的一种正则方法供选择。在每个训练批次中，通过忽略一部分的神经元（&lt;strong&gt;让其隐层节点值为0&lt;/strong&gt;），可以明显地减少过拟合现象。&lt;strong&gt;这种方式可以减少隐层节点间的相互作用&lt;/strong&gt;，高层的神经元需要低层的神经元的输出才能发挥作用，如果&lt;strong&gt;高层神经元过分依赖某个低层神经元，就会有过拟合&lt;/strong&gt;发生。在一次正向/反向的过程中，通过随机丢弃一些神经元，迫使高层神经元和其它的一些低层神经元协同工作，可以有效地防止神经元因为接收到过多的同类型参数而陷入过拟合的状态，来提高泛化程度。&lt;/p&gt;
&lt;p&gt;正常：&lt;/p&gt;
&lt;img src=&#34;https://microsoft.github.io/ai-edu/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/A2-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E7%AC%AC7%E6%AD%A5%20-%20%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/img/16/dropout_before.png&#34; alt=&#34;img&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;丢弃后：&lt;/p&gt;
&lt;img src=&#34;https://microsoft.github.io/ai-edu/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/A2-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/%E7%AC%AC7%E6%AD%A5%20-%20%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/img/16/dropout_after.png&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丢弃法将一些输出项随机置0来控制模型复杂度&lt;/li&gt;
&lt;li&gt;常作用在多层感知机（MLP）的隐藏层输出上&lt;/li&gt;
&lt;li&gt;丢弃概率是控制模型复杂度的超参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;批量归一化&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;批量归一化&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%89%b9%e9%87%8f%e5%bd%92%e4%b8%80%e5%8c%96&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最初论文目的是减少内部协变量转移（作者所说的“内部协变量转移”类似于上述的投机直觉，即&lt;strong&gt;变量值的分布在训练过程中会发生变化&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;后续论文指出它是通过在每个小批量加入噪音，来控制模型复杂度&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;C:\Users\11842\AppData\Roaming\Typora\typora-user-images\image-20221023111910705.png&#34; alt=&#34;image-20221023111910705&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;理解：在每一层输入和上一层输出之间加入了一个新的计算层，对数据的分布进行额外的约束，从而增强模型的泛化能力。 但是批量归一化同时也降低了模型的拟合能力，归一化之后的输入分布被强制拉到均值为0和标准差为1的正态分布上来。&lt;/p&gt;
&lt;p&gt;作用是持续加深深层网络的收敛速度，这使得研究人员能够训练100层以上的网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;批量规范化和其他层之间的一个关键区别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于批量规范化在完整的小批量上运行，因此我们不能像以前在引入其他层时那样忽略批量大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可学习的参数为γ-缩放（gamma）和β-偏移（beta）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全连接层和卷积层输出上，激活函数前&lt;/li&gt;
&lt;li&gt;全连接层和卷积层输入上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for 全连接层，作用在特征维&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for 卷积层，作用在通道维&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;代码&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;batch_norm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gamma&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;momentum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 通过is_grad_enabled来判断当前模式是训练模式还是预测模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_grad_enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 如果是在预测模式下，直接使用传入的移动平均所得的均值和方差&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;X_hat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moving_var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# 使用全连接层的情况，计算特征维上的均值和方差&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# 使用二维卷积层的情况，计算通道维上（axis=1）的均值和方差。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# 这里我们需要保持X的形状以便后面可以做广播运算&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keepdim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 训练模式下，用当前的均值和方差做标准化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;X_hat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 更新移动平均的均值和方差&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;moving_mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;momentum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_mean&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;momentum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;moving_var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;momentum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;momentum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gamma&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X_hat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beta&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 缩放和移位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_mean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moving_var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;小结&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;批量归一化固定小批量中的均值和方差，然后学习出适合的偏移和缩放&lt;/li&gt;
&lt;li&gt;加速收敛速度，但一般不改变模型精度&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;02.2-类神经网络优化技巧&lt;/h1&gt;&lt;h2&gt;critical point 概述&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;critical-point-概述&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#critical-point-%e6%a6%82%e8%bf%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;==临界点==：梯度 （grad） 为 0 的点&lt;/p&gt;
&lt;p&gt;loss,无法再下降,也许是因为卡在了critical point ⇒ local minima（局部最小值） OR saddle point（鞍点）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部最小值 -&amp;gt; 可能无路可走&lt;/li&gt;
&lt;li&gt;鞍点 -&amp;gt; 旁边还是有路可走&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;判断θ附近loss的梯度 -&amp;gt; 泰勒展开 -&amp;gt; 海塞矩阵&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcad56cb3-6fc6-4488-b1cd-b567fea2075c%2FUntitled.png?table=block&amp;id=1038a41a-a019-41ec-9e08-2e9a062e9bfc&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F515415e7-dcaa-499c-8dcb-9268061f824e%2FUntitled.png?table=block&amp;id=5d24c4da-36ca-43f5-9ea0-1c8935326271&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;g：一次微分，当到达临界点时，表示g为0，则绿色项不存在，原式等于第一项加红色项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;H：二次微分，根据红色项来判断临界点为哪种情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc88a449d-25e8-4c35-9e3f-5afe3e46e7b0%2FUntitled.png?table=block&amp;id=15c6ddd8-63da-45eb-8499-085c395e3542&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;红色部分 大于0，左边永远大于右边 L(θ`)，所以该点为最小值点&lt;/li&gt;
&lt;li&gt;红色部分 小于0，左边永远小于右边 L(θ`)，所以该点为最大值点&lt;/li&gt;
&lt;li&gt;红色部分有时大于0有时小于0，则为鞍点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：如果走到鞍点，可以利用H的特征向量确定参数的更新方向&lt;/p&gt;
&lt;p&gt;令特征值小于0，得到对应的特征向量u,在θ`的位置加上u,沿著u的方向做update得到θ,就可以让loss变小。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Local Minima比Saddle Point少的多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Small Batch v.s. Large Batch&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;small-batch-vs-large-batch&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#small-batch-vs-large-batch&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;batch_size 取大取小的关系：&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结论1：使用较小的BatchSize，在更新参数时会有Noisy（图中曲线弯弯折折）⇒有利于训练&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的Batch 求得的Loss略有差异，可以避免局部极小值“卡住”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9ec2c77d-56dd-4f99-8efc-782ffa48586f%2FUntitled.png?table=block&amp;amp;id=b876aaa1-e583-4960-997f-2a5d62968d22&amp;amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结论2：使用较小的BatchSize,可以避免Overfitting ⇒ 有利于测试(Testing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SB 在数据集（测试集）表现更好&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F149f4354-b2a9-41ee-bf78-a3e96d1ca042%2FUntitled.png?table=block&amp;id=91fc00ba-88ff-4e1b-bcf4-2512b8047204&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结：BatchSize是一个需要调整的参数，它会影响训练速度与优化效果。&lt;/p&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F3158ec11-5567-4ef4-a7d6-79d3db676675%2FUntitled.png?table=block&amp;id=6160f7de-7bcc-4299-8e1d-39cf98246302&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=1090&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Momentum（动量）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;momentum动量&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#momentum%e5%8a%a8%e9%87%8f&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;所谓的 Momentum, Update 的方向不是只考虑现在的 Gradient,而是考虑过去所有 Gradient 的总合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Vanilla Gradient Descent（一般的梯度下降）⇒ 只考虑梯度的方向，向反方向移动&lt;/li&gt;
&lt;li&gt;Gradient Descent + Momentum（考虑动量）⇒ 综合梯度+前一步的方向&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;总结 - 关于“小梯度”&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;总结---关于小梯度&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%80%bb%e7%bb%93---%e5%85%b3%e4%ba%8e%e5%b0%8f%e6%a2%af%e5%ba%a6&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;临界点的梯度为 0&lt;/li&gt;
&lt;li&gt;临界值点可以是鞍点或者局部最小值点
&lt;ul&gt;
&lt;li&gt;可以通过海塞矩阵确定&lt;/li&gt;
&lt;li&gt;局部最小值可能很少见&lt;/li&gt;
&lt;li&gt;有可能沿着海塞矩阵的特征向量的方向逃出鞍点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;较小的批次规模和动量有利于避开临界点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;自适应学习率&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;自适应学习率&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%87%aa%e9%80%82%e5%ba%94%e5%ad%a6%e4%b9%a0%e7%8e%87&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Error Surface&lt;/code&gt;: 根据不同参数，计算Loss得到的等高线图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Training  stuck 训练卡住或暂停不一定是最小梯度 -&amp;gt; Loss不再下降时，未必说明到达临界点，梯度可能还很大&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb0915a78-64fd-4120-87b1-2a03ca9f3318%2FUntitled.png?table=block&amp;id=6c742f56-dd7f-4176-b101-1aedf57fe0ab&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;客制化“学习率”
&lt;ul&gt;
&lt;li&gt;较大的学习率：Loss在山谷的两端震荡而不会下降&lt;/li&gt;
&lt;li&gt;较小的学习率：梯度较小时几乎难以移动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;客制化“梯度” ⇒  不同的参数（大小）需要不同的学习率&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本原则：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某一个方向上gradient的值很小,非常的平坦⇒learning rate调大一点,&lt;/li&gt;
&lt;li&gt;某一个方向上非常的陡峭,坡度很大⇒learning rate可以设得小一点&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Adagrad&lt;/code&gt;: 每次更新的𝜂就是等于前一次的𝜂再除以𝜎^t，而 σ^t则代表的是第 t 次以前的所有梯度更新值之平方和开根号(root mean square)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gradient都比较大,σ就比较大,在update的时候 参数update的量就比较小。
&lt;ul&gt;
&lt;li&gt;缺陷 ⇒ 不能“实时”考虑梯度的变化情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;RMSProp&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;添加参数$\alpha$，越大说明过去的梯度信息&lt;strong&gt;更重要&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;α设很小趋近於0,就代表这一步算出的gᵢ相较於之前所算出来的gradient而言比较重要&lt;/li&gt;
&lt;li&gt;α设很大趋近於1,就代表现在算出来的gᵢ比较不重要,之前算出来的gradient比较重要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;最常用的策略：Adam=RMSProp + Momentum&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​	Adam其实就是加了momentum的RMSProp，下图的公式mt代表的是momentum，就是前一个时间点的movement（momentum动量），vt就是RMSProp裡的σ，式子虽然看起來很复杂，但其實跟RMSProp很類似，&lt;/p&gt;
&lt;p&gt;​	每次更新都會调整新的gradient的比重。所以&lt;strong&gt;Adam&lt;/strong&gt;继承两者的优点，适合大部分的状况，为目前最常使用的优化方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*EmEGVj6OvV0kEdsT-nyIlg.png&#34; alt=&#34;img&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;img src=&#34;https://miro.medium.com/max/780/1*_oz4zR8-sUB6a7lf3j42Bw.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning Rate Decay：随著时间的不断地进行,随著参数不断的update,η越来越小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Warm Up⇒让learning rate先变大后变小&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在一开始，&lt;strong&gt;σ^t&lt;/strong&gt;下标 **i **的估计值有很大的方差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;σ指示某一个方向它到底有多陡/多平滑,这个统计的结果,要看得够多笔数据以后才精准,所以一开始我们的统计是不精準的。一开始learning rate比较小，是让它探索收集一些有关error surface的情报，在这一阶段使用较小的learning rate，限制参数不会走的离初始的地方太远；等到σ统计得比较精準以后再让learning rate慢慢爬升&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;总结&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;总结&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用动量，考虑过去的梯度**“大小”与“方向”**&lt;/li&gt;
&lt;li&gt;引入$\sigma$,考虑过去梯度的“&lt;strong&gt;大小&lt;/strong&gt;”（RMS）&lt;/li&gt;
&lt;li&gt;使用LearningRate Schedule&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;另一种思路&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;另一种思路&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%8f%a6%e4%b8%80%e7%a7%8d%e6%80%9d%e8%b7%af&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将Error Surface“铲平”  ⇒  Batch Normalization 批次标准化（归一化）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决：给不同的 dimension同样的数值范围  ⇒  Feature Normalization(归一化)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一种Standardization（标准化）方法：对不同数据样本向量的&lt;strong&gt;同一维&lt;/strong&gt;进行归一化&lt;/li&gt;
&lt;li&gt;做完 normalize 以后,这个 dimension 上面的数值就会平均是 0,然后它的 variance就会是 1,所以&lt;strong&gt;这一排数值的分布就都会在 0 上下&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对每一个 dimension都做一样的 normalization,就会发现所有 feature 不同 dimension 的数值都在 0 上下,那你可能就可以&lt;strong&gt;制造一个,比较好的 error surface&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在深度学习中，每一层都需要一次Normalization
&lt;ul&gt;
&lt;li&gt;对向量的对应element做求平均、标准差的运算，求得向量$\mu,\sigma$&lt;/li&gt;
&lt;li&gt;对每个向量$z$,利用$\mu,\sigma$对对应element进行归一化，得到$\tilde{z}$&lt;/li&gt;
&lt;li&gt;继续后续的步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意理解：“对一批z数据进行归一化”  ⇒  “网络”模型变为能够一次处理“一批x数据”的模型，数据之间相互关联&lt;/p&gt;
&lt;p&gt;Batch Normalization：实际上做Normalization时，只能考虑有限数量的数据⇒考虑一个Batch内的数据⇒近似整个数据集&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Batch Normalization适用於 batch size 比较大时。其中data可以认为足以表示整个 corpus 的分布；从而，将对整个 corpus做 Feature Normalization 这件事情,改成只在一个 batch中做 Feature Normalization作为近似&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1&gt;02.3-DeepLearning-Loss of Classification&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;各种损失函数的建议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Classification as Regression&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;classification-as-regression&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#classification-as-regression&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Classification with softmax&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F96fb2865-7d3f-42ea-acee-6da18cdd6260%2FUntitled.png?table=block&amp;amp;id=60e4d4be-6caf-4908-8b47-02633b3d4976&amp;amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们的目标只有0跟1,而y有任何值,我们就使用Softmax先把它Normalize到0到1之间,这样才好跟 label 的计算相似度&lt;/p&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff52d8d7e-0ba4-4e96-8109-6eb741ec3a2d%2FUntitled.png?table=block&amp;id=15c46703-192d-46ae-9e96-4918fd19edcb&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;经过计算后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出值变成0到1之间&lt;/li&gt;
&lt;li&gt;输出值的和為1&lt;/li&gt;
&lt;li&gt;原本大的值跟小的值的&lt;strong&gt;差距更大&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Softmax的输入，称作&lt;strong&gt;Logit&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二分类：使用sigmoid与softmax是等价的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;优化目标：减小y^和y&amp;rsquo;之间的差距e&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;优化目标减小y和y之间的差距e&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bc%98%e5%8c%96%e7%9b%ae%e6%a0%87%e5%87%8f%e5%b0%8fy%e5%92%8cy%e4%b9%8b%e9%97%b4%e7%9a%84%e5%b7%ae%e8%b7%9de&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在分类问题上，交叉熵相比较 MSE 更加适合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;注：在Pytorch中，softmax 函数被内建在Cross-enrtopy 损失函数中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从优化角度出发进行讨论，使用MSE时，左上角的位置虽然Loss很大，但梯度平坦，难以优化；而Cross-entropy则更易收敛⇒改变Loss函数，也会影响训练的过程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F1f6dae63-ffbc-41c6-83ee-bcf286ef2764%2FUntitled.png?table=block&amp;id=e028b452-d68c-4a12-be9e-42962d24b75a&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;h1&gt;03-CNN&lt;/h1&gt;&lt;p&gt;==网络模型的架构设计思想==&lt;/p&gt;
&lt;h2&gt;场景： 图片分类&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;场景-图片分类&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%9c%ba%e6%99%af-%e5%9b%be%e7%89%87%e5%88%86%e7%b1%bb&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一般过程：
&lt;ul&gt;
&lt;li&gt;把所有图片都先 Rescale 成大小一样&lt;/li&gt;
&lt;li&gt;把每一个类别,表示成一个 One-Hot 的 Vector（Dimension 的长度就决定了模型可以辨识出多少不同种类的东西,）&lt;/li&gt;
&lt;li&gt;将图像【输入】到模型中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何将图片输入到模型中？⇒  一般思路：展平→参数量过大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;神经元角度&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;神经元角度&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%a5%9e%e7%bb%8f%e5%85%83%e8%a7%92%e5%ba%a6&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;观察（1）：模型通过识别一些“特定模式”来识别物体，而非“整张图”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;简化（1）：设定“感受野”（Receptive Field）&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个神经元只需要考察特定范围内的图像信息，将图像内容展平后输入到神经元中即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;感受野之间可以重叠&lt;/li&gt;
&lt;li&gt;一个感受野可以有多个神经元“守备”&lt;/li&gt;
&lt;li&gt;感受野大小可以“有大有小”&lt;/li&gt;
&lt;li&gt;感受野可以只考虑某一些Channel&lt;/li&gt;
&lt;li&gt;感受野可以是“长方形”的&lt;/li&gt;
&lt;li&gt;感受野不一定要“相连”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;感受野的基本设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;看所有的Channel&lt;/p&gt;
&lt;p&gt;一般在做影像辨识的时候会看全部的 Channel。那么，在描述一个 Receptive Field 的时候,无需说明其Channel数，只要讲它的&lt;strong&gt;高、宽⇒Kernel Size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般不做过大的kernal Size，&lt;strong&gt;常常设定为&lt;/strong&gt;$3\times3$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个感受野会有&lt;strong&gt;不止一个神经元进行“守备”⇒输出通道数/卷积核数目&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同的感受野之间的关系⇒感受野的平移位移：stride【hyperparameter】&lt;/p&gt;
&lt;p&gt;一般希望感受野之间有重叠，避免交界处的pattern被忽略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;感受野超出影响的范围⇒padding（补值）&lt;/p&gt;
&lt;p&gt;补0；补平均值；补边缘值……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直方向移动&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;观察（2）：同样的pattern，可能出现在图片的“不同位置”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;简化（2）：不同 Receptive Field 的 Neuron共享参数⇒ Parameter Sharing权值共享&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对每个感受野，都使用一组相同的神经元进行守备；这一组神经元被称作filter，对不同感受野使用的filter参数相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;卷积层的优势&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;卷积层的优势&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%8d%b7%e7%a7%af%e5%b1%82%e7%9a%84%e4%bc%98%e5%8a%bf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;卷积层是“受限”（弹性变小）的FC（全连接层）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff84607df-a9c7-4df9-a346-6e64b748e790%2FUntitled.png?table=block&amp;id=32d002ac-b6d6-46b1-8658-e6a1b1ede39c&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;FC可以通过“学习”决定要看到的“图片”的范围。加上“感受野”概念后，就只能看某一个范围。&lt;/li&gt;
&lt;li&gt;FC可以自由决定守备不同“感受野”的各个神经元参数。加上“权值共享”概念后，守备不同感受野的&lt;strong&gt;同一个滤波器（filter）参数相同。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般而言，Model Bias 小,Model 的 Flexibility 很高的时候,它比较容易 Overfitting,Fully Connected Layer可以做各式各样的事情,它&lt;strong&gt;可以有各式各样的变化&lt;/strong&gt;,但是它可能没有办法在任何&lt;strong&gt;特定的任务&lt;/strong&gt;上做好&lt;/li&gt;
&lt;li&gt;CNN 的 Bias 比较大，它是专门為影像设计的，所以它在影像上仍然可以做得好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;滤波器角度&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;滤波器角度&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%bb%a4%e6%b3%a2%e5%99%a8%e8%a7%92%e5%ba%a6&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;卷积层中有若干个filter，每个filter可以用来“抓取”图片中的某一种特征（特征pattern的大小，小于感受野大小）。&lt;/p&gt;
&lt;p&gt;ilter的参数，其实就是神经元中的“权值（weight）”。&lt;/p&gt;
&lt;p&gt;不同的filter扫过一张图片，将会产生“新的图片”，每个filter将会产生图片中的一个channel⇒&lt;strong&gt;feature map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;filter的计算是**“内积”**：filter跟图片对应位置的数值直接相乘，所有的都乘完以后再相加。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;多层卷积&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多层卷积⇒让“小”卷积核看到“大”pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;总结&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;总结-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%80%bb%e7%bb%93-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对全连接层使用&lt;strong&gt;平移不变性&lt;/strong&gt;和&lt;strong&gt;局部性&lt;/strong&gt;得到卷积层&lt;/li&gt;
&lt;li&gt;填充和步幅
&lt;ul&gt;
&lt;li&gt;这两者是卷积层的超参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;padding&lt;/strong&gt;  避免信息损失，填充在输入周围添加额外的行或列，来控制输出形状的减少量，例如输入3×3，输出为4×4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stride&lt;/strong&gt;  压缩一部分信息，步幅是每次滑动卷积核窗口的行或列步长，可以&lt;strong&gt;成倍的减少输出形状&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个角度理解“卷积”：神经元角度（neuron）与滤波器（filter）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;不用看整张图片范围&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;图片不同位置的相同模式pattern&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;神经元&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只要守备感受野&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;守备不同感受野的神经元共用参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;滤波器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;使用滤波器侦测模式pattern&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;滤波器“扫过”整张图片&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;池化层 Pooling&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;池化层-pooling&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%b1%a0%e5%8c%96%e5%b1%82-pooling&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;==图片降采样不影响图片的辨析⇒Pooling（池化）把图片变小，减小运算量==&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pooling本身没有参数,所以它不是一个 Layer，没有要 Learn 的东西。行为类似于一个 Activation Function,（Sigmoid ， ReLU ），是一个 Operator，行为固定&lt;/p&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Max pooling 最大池化层：每个窗口最强的模式信号&lt;/li&gt;
&lt;li&gt;Avg Pooling 平均池化层：将最大池化层中的“最大”操作替换为“平均”&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;池化层返回窗口中最大或平均值&lt;/li&gt;
&lt;li&gt;缓解卷积层对位置的敏感性&lt;/li&gt;
&lt;li&gt;同样有窗口大小，填充，步幅等超参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The whole CNN（典型分类网络结构）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-whole-cnn典型分类网络结构&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-whole-cnn%e5%85%b8%e5%9e%8b%e5%88%86%e7%b1%bb%e7%bd%91%e7%bb%9c%e7%bb%93%e6%9e%84&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;conv-pooling-&amp;hellip;（循环）-flatten-FC-softmax&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般：卷积与池化交替使用。pooling⇒可有可无（算力支撑）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算力足够 -&amp;gt;  无需池化
Pooling对于 Performance,会带来一点伤害的。如果你运算资源足够支撑你不做 Pooling 的话,很多 Network 的架构的设计,往往今天就不做 Pooling,全 Convolution。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最后注意：&lt;/p&gt;
&lt;p&gt;CNN 并不能够处理影像放大缩小,或者是旋转的问题。所以在做影像辨识的时候,往往都要做 Data Augmentation（数据增强），把你的训练数据截一小块出来放大缩小、把图片旋转,CNN 才会做到好的结果。&lt;/p&gt;
&lt;p&gt;有一个架构叫 spacial Transformer Layer可以处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;04-Self-attention&lt;/h1&gt;&lt;h2&gt;attention&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;attention&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#attention&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Attention机制&lt;/strong&gt;就是让&lt;code&gt;编码器编码出来的向量根据解码器要解码的东西动态变化的一种机制&lt;/code&gt;，貌似来源灵感就是人类视觉在看某一个东西的时候会有选择的针对重要的地方看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;计算attention&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步是将query和每个key进行相似度计算得到权重，常用的相似度函数有点积，拼接，感知机等&lt;/li&gt;
&lt;li&gt;第二步一般是使用一个softmax函数对这些权重进行归一化&lt;/li&gt;
&lt;li&gt;第三步将权重和相应的键值value进行加权求和得到最后的attention。目前在NLP研究中，key和value常常都是同一个，即&lt;strong&gt;key=value&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;机制发生在Target（输出）的元素Query（查询）和Source（输入）中的所有元素之间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如entity1，entity2，entity3….，attn会输出[0.1，0.2，0.5，….]这种，告诉你entity3重要些。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 &lt;strong&gt;Self-attention&lt;/strong&gt;，它指的不是Target和Source之间的Attention机制，而是Source内部元素之间或者Target内部元素之间发生的Attention机制，也可以理解为Target=Source这种特殊情况下的注意力计算机制。&lt;strong&gt;Q=K=V&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;self attention会给你一个矩阵，告诉你 entity1 和entity2、entity3 ….的关联程度、entity2和entity1、entity3…的关联程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;attention是source对target的attention&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;self attention 是source 对source的attention。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;Transformer中在计算权重参数时将文字向量转成对应的KQV，只需要在Source处进行对应的矩阵操作，用不到Target中的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Self-attention v.s. CNN&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;self-attention-vs-cnn&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#self-attention-vs-cnn&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff7af7984-e535-4c87-bcc7-b678b6e5402f%2FUntitled.png?table=block&amp;id=bc9d4c30-939d-49bf-b64f-7fa7e6a5a189&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;两者对比&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CNN：感知域（receptive field）是人为设定的，只考虑范围内的信息&lt;/li&gt;
&lt;li&gt;Self-attention：考虑一个像素和整张图片的信息⇒自己学出“感知域”的形状和大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结论：CNN就是 Self-attention 的特例,Self-attention 只要设定合适的参数,它可以做到跟 CNN 一模一样的事情&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;self attention,是更 flexible 的 CNN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⇒self-attention需要更多的数据进行训练，否则会欠拟合；否则CNN的性能更好&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-attention 它弹性比较大,所以需要比较多的训练资料,训练资料少的时候,就会 overfitting&lt;/li&gt;
&lt;li&gt;而 CNN 它弹性比较小,在训练资料少的时候,结果比较好,但训练资料多的时候,它没有办法从更大量的训练资料得到好处&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Self-attention v.s. RNN（循环神经网络）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;self-attention-vs-rnn循环神经网络&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#self-attention-vs-rnn%e5%be%aa%e7%8e%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbbf60895-7a71-416f-b617-003aa847020e%2FUntitled.png?table=block&amp;id=93343e26-2054-43ba-bcf7-102f0e3e8cc1&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;主要区别：&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 RNN 来说,假设最右边这个黄色的 vector,要考虑最左边的这个输入,那它必须要把最左边的输入存在 memory 裡面都&lt;strong&gt;不能够忘掉&lt;/strong&gt;,一路带到最右边,才能够在最后一个时间点被考虑&lt;/li&gt;
&lt;li&gt;但对 Self-attention 来说没有这个问题,可以在整个 sequence 上非常远的 vector之间&lt;strong&gt;轻易地抽取信息&lt;/strong&gt;,所以这是 RNN 跟 Self-attention,一个不一样的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Self-attention 有一个优势,是它可以平行处理所有的输出，效率更高：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Self-attention:四个 vector 是平行产生的,并不需要等谁先运算完才把其他运算出来&lt;/li&gt;
&lt;li&gt;RNN 是没有办法平行化的，必须依次产生&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;05-Transformer&lt;/h1&gt;&lt;h2&gt;应用&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;应用&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ba%94%e7%94%a8&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;语音，机器翻译，聊天机器人，语音合成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于自注意力同时具有&lt;em&gt;&lt;strong&gt;并行计算&lt;/strong&gt;&lt;/em&gt;和&lt;em&gt;&lt;strong&gt;最短的最大路径长度&lt;/strong&gt;&lt;/em&gt;这两个优势，所以想到用该想法来设计深度学习架构。&amp;gt; &amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;transformer模型完全基于注意力机制，没有任何卷积层或循环神经网络层&lt;/p&gt;
&lt;p&gt;更准确地讲，Transformer由且仅由&lt;strong&gt;self-Attenion&lt;/strong&gt;和&lt;strong&gt;Feed Forward Neural Network&lt;/strong&gt;组成。一个基于Transformer的可训练的神经网络可以通过堆叠Transformer的形式进行搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://zh-v2.d2l.ai/_images/transformer.svg&#34; alt=&#34;../_images/transformer.svg&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;h2&gt;解决的问题&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;解决的问题&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%a7%a3%e5%86%b3%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;考虑到 RNN 相关算法只能从左向右依次计算或者从右向左依次计算，这种机制带来了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;时间片 t 的计算依赖 t−1 时刻的计算结果，这样限制了模型的并行能力；（后者的输入过分依赖前者输出）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序计算的过程中信息会丢失，尽管LSTM等门机制的结构一定程度上缓解了长期依赖的问题，但是对于特别长期的依赖现象,LSTM（长短期记忆）依旧无能为力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LSTM（Long-Short Term Memory）：一种特殊的 &lt;a href=&#34;https://easyai.tech/ai-definition/rnn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RNN&lt;/a&gt;，能够学习长期依赖性。公共LSTM单元由单元，输入门，输出门和忘记门组成。该单元记住任意时间间隔内的值，并且三个门控制进出单元的信息流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;GRU（Gate Recurrent Unit）：和LSTM一样，也是为了解决长期记忆和反向传播中的梯度等问题而提出来的。功能相当于LSTM，但更易计算，GRU内部少了一个”门控“，参数比LSTM少，考虑到硬件的&lt;strong&gt;计算能力&lt;/strong&gt;和&lt;strong&gt;时间成本&lt;/strong&gt;，GRU优先&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Transformer&lt;/strong&gt;的提出解决了上面两个问题，首先它使用了Attention机制，将序列中的任意两个位置之间的距离是缩小为一个常量（可以为1）；其次它不是类似RNN的顺序结构，因此具有更好的并行性，符合现有的GPU框架。&lt;/p&gt;
&lt;h2&gt;本质&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;本质&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%9c%ac%e8%b4%a8&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个Encoder-Decoder的结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://pic1.zhimg.com/v2-5a252caa82f87920eadea2a2e93dc528_r.jpg&#34; alt=&#34;img&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;img src=&#34;https://pic3.zhimg.com/80/v2-c14a98dbcb1a7f6f2d18cf9a1f591be6_1440w.webp&#34; alt=&#34;img&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;p&gt;由上图，编码器由6个编码block组成，同样解码器是6个解码block组成。与所有的生成模型相同的是，编码器的输出会作为解码器的输入&lt;/p&gt;
&lt;p&gt;在Transformer的encoder中，数据首先会经过一个叫做&lt;code&gt;self-attention&lt;/code&gt;的模块得到一个加权之后的特征向量 Z ，这个 Z 便是论文公式1中的 Attention(Q,K,V) ：&lt;/p&gt;
&lt;img src=&#34;C:\Users\11842\AppData\Roaming\Typora\typora-user-images\image-20221008140244425.png&#34; alt=&#34;image-20221008140244425&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;得到 Z 之后，它会被送到encoder的下一个模块，即&lt;code&gt;Feed Forward Neural Network&lt;/code&gt;(前馈神经网络)。这个全连接有两层，第一层的激活函数是ReLU，第二层是一个线性激活函数，可以表示为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前馈神经网络：又叫&lt;a href=&#34;https://so.csdn.net/so/search?q=%e5%a4%9a%e5%b1%82%e6%84%9f%e7%9f%a5%e5%99%a8&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多层感知器&lt;/a&gt;（Multi-Layer Perceptron，MLP），是一种最简单的&lt;a href=&#34;https://baike.baidu.com/item/%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c/16600562?fromModule=lemma_inlink&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;神经网络&lt;/a&gt;，各神经元分层排列，每个神经元只与前一层的神经元相连。接收前一层的输出，并输出给下一层，各层间没有反馈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;C:\Users\11842\AppData\Roaming\Typora\typora-user-images\image-20221008140402702.png&#34; alt=&#34;image-20221008140402702&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;&lt;code&gt;Self-Attention是Transformer最核心的内容&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;self-attention中，每个单词有3个不同的向量，它们分别是&lt;strong&gt;Query向量（ Q ），Key向量（ K ）和Value向量（ V ）&lt;/strong&gt;，长度均是64。它们是通过3个不同的权值矩阵由嵌入向量 X 乘以三个不同的权值矩阵 WQ ， WK ， WV 得到，其中三个矩阵的尺寸也是相同的。均是 512×64 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Attention的计算方法，整个过程可以分成7步：&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如上文，将输入单词转化成嵌入向量；&lt;/li&gt;
&lt;li&gt;根据嵌入向量得到 q ， k ， v 三个向量；&lt;/li&gt;
&lt;li&gt;为每个向量计算一个score： score=q⋅k ；&lt;/li&gt;
&lt;li&gt;为了梯度的稳定，Transformer使用了score归一化，即除以 dk ；&lt;/li&gt;
&lt;li&gt;对score施以softmax激活函数；&lt;/li&gt;
&lt;li&gt;softmax点乘Value值 v ，得到加权的每个输入向量的评分 v ；&lt;/li&gt;
&lt;li&gt;相加之后得到最终的输出结果 z ： z=∑v 。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;最后一点强调其采用了&lt;a href=&#34;https://zhuanlan.zhihu.com/p/42706477&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;残差网络&lt;/a&gt;中的short-cut结构，目的当然是解决深度学习中的退化问题,层加深可能导致“网络”退化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;优缺点&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;优缺点&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bc%98%e7%bc%ba%e7%82%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虽然Transformer最终也没有逃脱传统学习的套路，Transformer也只是一个全连接（或者是一维卷积）加Attention的结合体。但是其设计已经足够有创新，因为其抛弃了在NLP中最根本的RNN或者CNN并且取得了非常不错的效果，算法的设计非常精彩，值得每个深度学习的相关人员仔细研究和品位。&lt;/li&gt;
&lt;li&gt;Transformer的设计最大的带来性能提升的关键是将任意两个单词的距离是1，这对解决NLP中棘手的长期依赖问题是非常有效的。&lt;/li&gt;
&lt;li&gt;Transformer不仅仅可以应用在NLP的机器翻译领域，甚至可以不局限于NLP领域，是非常有科研潜力的一个方向。&lt;/li&gt;
&lt;li&gt;算法的并行性非常好，符合目前的硬件（主要指GPU）环境。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;粗暴的抛弃RNN和CNN虽然非常炫技，但是它也使模型丧失了捕捉局部特征的能力，RNN + CNN + Transformer的结合可能会带来更好的效果&lt;/li&gt;
&lt;li&gt;Transformer失去的位置信息其实在NLP中非常重要，而论文中在特征向量中加入Position Embedding也只是一个权宜之计，并没有改变Transformer结构上的固有缺陷。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Seq2Seq（&lt;em&gt;序列到序列&lt;/em&gt;）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;seq2seq序列到序列&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#seq2seq%e5%ba%8f%e5%88%97%e5%88%b0%e5%ba%8f%e5%88%97&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Encoder-Decoder&lt;/strong&gt;结构的网络，它的输入是一个序列，输出也是一个序列。在Encoder中，将序列转换成一个固定长度的向量，然后通过Decoder将该向量转换成我们想要的序列输出出来。&lt;/p&gt;
&lt;p&gt;==Encoder==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入序列,可以使用RNN，CNN，Self-attention&lt;/li&gt;
&lt;li&gt;内部 block 包含若干层, Self-attention+FC在送入block之前，需先进行positional encoding(位置编码)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==Decoder==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输出序列，Decoder 会把自己的输出,当做接下来的输入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果产生错误则会导致Error Propagation，步步错 	–&amp;gt; 	解决：Teacher Forcing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;teacher-forcing 在训练网络过程中，每次不使用上一个state的输出作为下一个state的输入，而是直接使用训练数据的标准答案(ground truth)的对应上一项作为下一个state的输入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;==Encoder-Decoder之间的信息传递⇒CrossAttention==&lt;/p&gt;
&lt;p&gt;过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encoder输入一排向量,输出一排向量 $a^1,a^2,a^3$，经过transform產生 Key1 Key2 Key3（ $k^1,k^2,k^3$)，以及 $v^1,v^2,v^3$.（encoder 拿到 K，V）&lt;/li&gt;
&lt;li&gt;Decoder 会先吃 BEGIN,得到一个向量,输入多少长度的向量,输出就是多少向量。乘上一个矩阵做一个 Transform,得到一个 Query 叫做  $q$（decoder 拿到 Q）&lt;/li&gt;
&lt;li&gt;利用q,k计算attention的分数，并做Normalization，得到 $\alpha_1&amp;rsquo;,\alpha_2&amp;rsquo;,\alpha_3&amp;rsquo;,$&lt;/li&gt;
&lt;li&gt;$\alpha_1&amp;rsquo;,\alpha_2&amp;rsquo;,\alpha_3&amp;rsquo;,$与 $v^1,v^2,v^3$做weighted sum（加权求和），得到  $v$.&lt;/li&gt;
&lt;li&gt;$v$丢进Fully-Connected 的Network，做接下来的任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：Decoder 就是产生一个q,去 Encoder 抽取信息出来,当做接下来的 Decoder 的Fully-Connected 的 Network 的 Input&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;==评测标准==&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BLEU&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BLEU 就是用来衡量&lt;a href=&#34;https://so.csdn.net/so/search?q=%e6%9c%ba%e5%99%a8%e7%bf%bb%e8%af%91&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;机器翻译&lt;/a&gt;文本与参考文本之间的相似程度的指标,取值范围在0-1, 取值越靠近1表示机器翻译结果越好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;C:\Users\11842\AppData\Roaming\Typora\typora-user-images\image-20221009103458199.png&#34; alt=&#34;image-20221009103458199&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;，在训练时，是对每一个生成的token进行优化，使用的指标是交叉熵。&lt;/p&gt;
&lt;p&gt;换言之，训练的时候,是看 Cross Entropy,但是我们实际上你作业真正评估的时候,看的是 BLEU Score。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并且，不能把BLEU作为LOSS⇒无法微分。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**解决办法：**遇到你在 Optimization 无法解决的问题,用 RL 硬 Train 一发。遇到你无法 Optimize 的 Loss Function,把它当做是 RL 的 Reward,把你的 Decoder 当做是 Agent。&lt;/p&gt;
&lt;p&gt;==Scheduled Sampling==&lt;/p&gt;
&lt;p&gt;Scheduled Sampling是指RNN训练时时会&lt;strong&gt;随机使用模型真实label&lt;/strong&gt;来作为下一个时刻的输入，而不像原先那样只会使用预测输出，原先是Teacher Forcing的缘故，但会使训练集和测试集效果不一，所以偶尔需要给 decoder一些错误的输入 —&amp;gt; 采用计划采样。&lt;/p&gt;
&lt;p&gt;缺点是会损坏平行化能力。&lt;/p&gt;
&lt;h1&gt;06-Generative Model(GAN)&lt;/h1&gt;&lt;p&gt;&lt;code&gt;生成对抗网络&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;属于非监督学习，通过两个神经网络相互博弈的方式进行学习&lt;/p&gt;
&lt;h2&gt;应用&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;应用-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ba%94%e7%94%a8-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Anime Face Generation（动画人脸生成）&lt;/p&gt;
&lt;p&gt;Progressive GAN——真实人脸生成⇒生成“没有看过的\连续变化的”人脸&lt;/p&gt;
&lt;h2&gt;结构&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;结构&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%bb%93%e6%9e%84&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;生成器 Generation&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于生成器，输入需要一个n维度向量，输出为图片像素大小的图片。因而首先我们需要得到输入的向量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips: 生成器可以是任意可以输出图片的模型，比如最简单的全连接神经网络，又或者是反卷积网络等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里输入的向量我们将其视为携带输出的某些信息，比如说手写数字为数字几，手写的潦草程度等等。由于这里我们对于输出数字的具体信息不做要求，只要求其能够最大程度与真实手写数字相似（能骗过判别器）即可。所以我们使用&lt;strong&gt;随机生成的向量来作为输入&lt;/strong&gt;即可，这里面的随机输入最好是满足常见分布比如均值分布，高斯分布等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips: 假如我们后面需要获得具体的输出数字等信息的时候，我们可以对输入向量产生的输出进行分析，获取到哪些维度是用于控制数字编号等信息的即可以得到具体的输出。而在训练之前往往不会去规定它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;判别器 Discriminator&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;往往是常见的判别器，输入为图片，输出为图片的真伪标签。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips: 判别器与生成器一样，可以是任意的判别器模型，比如全连接网络，或者是包含卷积的网络等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;训练&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;训练&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%ae%ad%e7%bb%83&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;基本流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化判别器D的参数 θd 和生成器G的参数 θg 。&lt;/li&gt;
&lt;li&gt;从真实样本中采样 m 个样本 { x1,x2,&amp;hellip;xm } ，从先验分布噪声中采样 m 个噪声样本 { z1,z2,&amp;hellip;,zm } 并通过生成器获取 m 个生成样本 { x~1,x~2,&amp;hellip;,x~m } 。固定生成器G，训练判别器D尽可能好地准确判别真实样本和生成样本，尽可能大地区分正确样本和生成的样本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环k次更新判别器之后，使用较小的学习率来更新一次生成器的参数&lt;/strong&gt;，训练生成器使其尽可能能够减小生成样本与真实样本之间的差距，也相当于尽量使得判别器判别错误。&lt;/li&gt;
&lt;li&gt;多次更新迭代之后，最终理想情况是使得判别器判别不出样本来自于生成器的输出还是真实的输出。亦即最终样本判别概率均为0.5。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips: 之所以要训练k次判别器，再训练生成器，是因为要先拥有一个好的判别器，使得能够教好地区分出真实样本和生成样本之后，才好更为准确地对生成器进行更新。更直观的理解可以参考下图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://pic2.zhimg.com/v2-11cdb09371a33f4526a8a7f79e0e39f1_r.jpg&#34; alt=&#34;img&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;注：图中的&lt;strong&gt;黑色虚线&lt;/strong&gt;表示真实的样本的分布情况，&lt;strong&gt;蓝色虚线&lt;/strong&gt;表示判别器判别概率的分布情况，&lt;strong&gt;绿色实线&lt;/strong&gt;表示生成样本的分布。 Z 表示噪声， Z 到 x 表示通过生成器之后的分布的映射情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的目标是使用生成样本分布（绿色实线）去拟合真实的样本分布（黑色虚线），来达到生成以假乱真样本的目的。&lt;/p&gt;
&lt;p&gt;可以看到在**（a）&lt;strong&gt;状态处于最初始的状态的时候，生成器生成的分布和真实分布区别较大，并且判别器判别出样本的概率不是很稳定，因此会先训练判别器来更好地分辨样本。
通过多次训练判别器来达到&lt;/strong&gt;（b）&lt;strong&gt;样本状态，此时判别样本区分得非常显著和良好。然后再对生成器进行训练。
训练生成器之后达到&lt;/strong&gt;（c）&lt;strong&gt;样本状态，此时生成器分布相比之前，逼近了真实样本分布。
经过多次反复训练迭代之后，最终希望能够达到&lt;/strong&gt;（d）**状态，生成样本分布拟合于真实样本分布，并且判别器分辨不出样本是生成的还是真实的（判别概率均为0.5）。也就是说我们这个时候就可以生成出非常真实的样本啦，目的达到。&lt;/p&gt;
&lt;h3&gt;训练的难点&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;训练的难点&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%ae%ad%e7%bb%83%e7%9a%84%e9%9a%be%e7%82%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;生成器和判别器需要 match each other（棋逢对手）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个 Network,这个 Generator 跟 Discriminator,它们是&lt;strong&gt;互相砥砺,才能互相成长的&lt;/strong&gt;,只要其中一者,发生什么问题停止训练,另外一者就会跟著停下训练,就会跟著变差。我们需要保证二者的loss在这一过程中不断下降。&lt;/p&gt;
&lt;p&gt;**困难：**Discriminator 跟 Generator,它们互动的过程是自动的。我们不会在中间,每一次 Train Discriminator 的时候都换 Hyperparameter（超参数）。如果有一次loss没有下降，那整个训练过程都有可能出现问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GAN for sequence Generation⇒不能用GD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于取了max，这一运算使得Discriminator的score对decoder参数不可微分，也就不能做GD。&lt;/p&gt;
&lt;p&gt;不能使用GD⇒使用Reinforcement Learning（强化学习）？→GAN+RL难以训练&lt;/p&gt;
&lt;p&gt;**解决：**直接从随机的初始化参数开始Train 它的 Generator,然后让 Generator 可以產生文字,它最关键的就是爆调 Hyperparameter,跟一大堆的 Tips&lt;/p&gt;
&lt;h2&gt;生成器评估&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;生成器评估&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%94%9f%e6%88%90%e5%99%a8%e8%af%84%e4%bc%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直觉的方法：人眼来看⇒不客观、不稳定、代价高&lt;/li&gt;
&lt;li&gt;自动化方法：影像分类系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Quality：对一张图片&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将图片输入影像辨识系统：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个概率的分布如果越集中，说明产生的图片能够被影像分类系统“很肯定地”分辨出来，代表说现在产生的图片可能越好。&lt;/li&gt;
&lt;li&gt;反之，如果产生的图像是“四不像”，图片分类系统感到困惑，概率分布变得平坦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Diversity：对所有（一批）图片&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diversity-Mode Collapse(模型崩溃）⇒训练输出的分布局限在很小的范围。&lt;/li&gt;
&lt;li&gt;Diversity-Mode Dropping(模型丢弃）⇒训练输出的分布范围较大，但没有完全覆盖真实数据分布（多样性减小）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;评估多样性：把影像辨识系统对所有生成结果的输出平均起来。&lt;/p&gt;
&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb9a35b8b-fe11-4aaa-9ac1-1d7808592205%2FUntitled.png?table=block&amp;id=0f03650e-417e-423a-aca1-76b75a6ea4c7&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;平均分布集中⇒多样性低&lt;/li&gt;
&lt;li&gt;平均分布“均匀”⇒多样性高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;量化指标&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Inception Score（IS）⇒基于CNN的Inception网络&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基于paper：&lt;em&gt;&lt;strong&gt;A Note on the Inception Score&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;很多关于 GAN 生成图片的论文中，作者评价其模型表现的一项重要指标是 Inception Score（下文简称 IS）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要考虑两方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰度&lt;/li&gt;
&lt;li&gt;多样性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;言归正传：将生成器 生成结果放进Inception网络，通过输出的分布结果来衡量。如果 Quality 高,那个 Diversity 又大,那 Inception Score 就会比较大&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fréchet Inception Distance (FID)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Frechet Inception 距离（FID）是评估生成图像质量的度量标准，专门用于评估生成对抗网络的性能。&lt;/p&gt;
&lt;p&gt;一些情况下，生成的图像是“同一类别”的，看“分布”并不合适。&lt;/p&gt;
&lt;p&gt;同样将图片送入Inception Network，取Softmax 之前的 Hidden Layer 输出的向量，来代表这张图片，利用这个向量来衡量两个分布之间的关系。&lt;/p&gt;
&lt;p&gt;⇒假设真实数据和生成数据的两个分布，都是从高斯分布中抽样得到的，计算两个高斯分布之间的Fréchet Distance，越小代表分布越接近，图片品质越高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将任意分布都视为“高斯分布”会有问题&lt;/li&gt;
&lt;li&gt;计算FID需要大量采样，计算量大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;举例&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;举例&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%b8%be%e4%be%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Conditional Generation⇒supervised learning&lt;/p&gt;
&lt;h3&gt;Case 1:Text-to-image&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;case-1text-to-image&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#case-1text-to-image&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;img src=&#34;https://diamond-mule-bee.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F00475494-2ba0-4859-b34b-4e56deb3b17e%2FUntitled.png?table=block&amp;id=d912cb25-2a9c-457a-a6dd-13561a566535&amp;spaceId=effd33e2-527b-43dc-aef5-7b5ee7b83428&amp;width=2000&amp;userId=&amp;cache=v2&#34; alt=&#34;img&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;操控 Generator 的输出&lt;/strong&gt;,我们给它一个 Condition条件 x，再从一个简单分布中抽样一个$z$,让generator&lt;strong&gt;根据 x 跟 z 来产生 y。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，x 就是一段文字，对希望得到的人脸形象进行描述。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何训练？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;魔改DIscriminator**：**&lt;/p&gt;
&lt;p&gt;Discriminator 不是只吃图片 y,它还要吃 Condition x。一方面&lt;strong&gt;图片要好&lt;/strong&gt;,另外一方面,这个&lt;strong&gt;图片跟文字的叙述必须要是相配&lt;/strong&gt;的,Discriminator 才会给高分。&lt;/p&gt;
&lt;h3&gt;Case 2：Image Translation（pix2pix）&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;case-2image-translationpix2pix&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#case-2image-translationpix2pix&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注：利用Supervised Learning训练的问题→输出“模糊”&lt;/p&gt;
&lt;p&gt;解决：单纯用 GAN 的话,它有一个小问题,所以它產生出来的图片,比较真实,但是它的问题是它的创造力,想像力过度丰富,如果你要做到最好,往往就是 GAN 跟 Supervised Learning,同时使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Case 3：声音-图片&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;case-3声音-图片&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#case-3%e5%a3%b0%e9%9f%b3-%e5%9b%be%e7%89%87&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3&gt;Case 4： 产生会动的人像&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;case-4-产生会动的人像&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#case-4-%e4%ba%a7%e7%94%9f%e4%bc%9a%e5%8a%a8%e7%9a%84%e4%ba%ba%e5%83%8f&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h1&gt;07-Self-Supervised Learning（BERT）&lt;/h1&gt;&lt;p&gt;&lt;code&gt;自我监督学习&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BERT(Bidirectional Encoder Representation from Transformers)是2018年10月由Google AI研究院提出的一种预训练模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BERT是一个&lt;strong&gt;transformer的Encoder&lt;/strong&gt;，BERT可以输入一行向量，然后输出另一行向量，输出的长度与输入的长度相同。BERT一般用于&lt;strong&gt;自然语言处理&lt;/strong&gt;，一般来说，它的输入是一串文本。当然，也可以输入语音、图像等“序列”。&lt;/p&gt;
&lt;h2&gt;Masking Input&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;masking-input&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#masking-input&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;随机盖住一些输入的文字，被mask的部分是随机决定的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MASK的方法：&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种方法是，用一个&lt;strong&gt;特殊的符号替换句子中的一个词&lt;/strong&gt;，我们用 &lt;strong&gt;&amp;ldquo;MASK &amp;ldquo;标&lt;/strong&gt;记来表示这个特殊符号，你可以把它看作一个新字，这个字完全是一个新词，它不在你的字典里，这意味着mask了原文。&lt;/li&gt;
&lt;li&gt;另外一种方法，&lt;strong&gt;随机&lt;/strong&gt;把某一个字&lt;strong&gt;换成另一个字&lt;/strong&gt;。中文的 &amp;ldquo;湾&amp;quot;字被放在这里，然后你可以选择另一个中文字来替换它，它可以变成 &amp;ldquo;一 &amp;ldquo;字，变成 &amp;ldquo;天 &amp;ldquo;字，变成 &amp;ldquo;大 &amp;ldquo;字，或者变成 &amp;ldquo;小 &amp;ldquo;字，我们只是用随机选择的某个字来替换它&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种方法&lt;strong&gt;都可以使用，使用哪种方法也是随机决定的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;训练方法：&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向BERT输入一个句子，先随机决定哪一部分的汉字将被mask。&lt;/li&gt;
&lt;li&gt;输入一个序列，我们把BERT的相应输出看作是另一个序列&lt;/li&gt;
&lt;li&gt;在输入序列中寻找mask部分的相应输出，将这个向量通过一个Linear transform（矩阵相乘），并做Softmax得到一个分布。&lt;/li&gt;
&lt;li&gt;用一个one-hot vector来表示MASK的字符，并使输出和one-hot vector之间的交叉熵损失最小。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 本质上，就是在解决一个&lt;strong&gt;分类问题&lt;/strong&gt;。BERT要做的是&lt;strong&gt;预测什么被盖住。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;BERT的实际用途&lt;/code&gt;⇒下游任务（Downstream Tasks）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;预训练与微调：&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预训练：产生BERT的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微调：利用一些特别的信息，使BERT能够完成某种任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BERT只学习了两个“填空”任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个是掩盖一些字符，然后要求它填补缺失的字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预测两个句子是否有顺序关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，BERT可以被应用在其他的任务【真正想要应用的任务】上，可能与“填空”并无关系甚至完全不同。【胚胎干细胞】当我们想让BERT学习做这些任务时，只&lt;strong&gt;需要一些标记的信息，就能够“激发潜能”&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;评价任务集——GLUE&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;评价任务集glue&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%af%84%e4%bb%b7%e4%bb%bb%e5%8a%a1%e9%9b%86glue&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;（General Language Understanding Evaluation）&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
